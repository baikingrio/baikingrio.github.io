<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>稻草人</title>
  
  <subtitle>大成若缺，其用不弊；大盈若冲，其用不穷。大直若屈，大巧若拙，大辩若诺。躁胜寒，静胜热，清静为天下正。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.googol.tech/"/>
  <updated>2018-03-01T06:37:15.128Z</updated>
  <id>http://www.googol.tech/</id>
  
  <author>
    <name>稻草人</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手摸手一步一步来制作BmobJavaSDK(一)</title>
    <link href="http://www.googol.tech/2018/03/01/%E6%89%8B%E6%91%B8%E6%89%8B%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5%E5%88%B6%E4%BD%9CBmobJavaSDK-%E4%B8%80/"/>
    <id>http://www.googol.tech/2018/03/01/手摸手一步一步来制作BmobJavaSDK-一/</id>
    <published>2018-03-01T06:29:00.000Z</published>
    <updated>2018-03-01T06:37:15.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引用的技术"><a href="#引用的技术" class="headerlink" title="引用的技术"></a>引用的技术</h3><ul><li>Retrofit2</li><li>RxJava</li><li>Lombok</li></ul><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>使用简单、高效。尽可能让服务和使用者之间不用产生额外的学习成本和使用成本，在尽量不影响使用者源代码结构及编码方式的同时，能大幅提高使用者的开发效率及产品质量。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>首先SDK的所有功能都是基于Bmob平台现有的RestfulApi进行实现的，一般来说只要RestfulApi中提供的接口，在SDK中都能找到对应的实现。本篇博客我们先搭建好一个SDK的基本框架，然后简单实现增、删、改三个接口的功能。</p><p>接下来我们看一看Bmob数据服务<a href="http://doc.bmob.cn/data/restful/develop_doc/" target="_blank" rel="noopener">Restful开发文档</a>,其中注意文档中的两点：<br><img src="/2018/03/01/手摸手一步一步来制作BmobJavaSDK-一/note.png" title="This is an note image"></p><p>这里说明了所有接口请求时所需的参数与响应的结果是怎样的。图中只给出了错误情况下的固定json格式，其他情况下返回的也是一个JsonObject格式的内容，只是结构内容不是固定的，这里需要看每个接口的说明。</p><h3 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h3><p>基于Retrofilt2的特性，我们将每个功能接口在BmobApiService接口中进行定义，方法中各注解的使用和含义可以参考Retrofit2的相关文档，这里就不展开讲解了。现在BmobApiService接口中，我们定义了三个方法insert、delete、update分别对应Bmob数据服务RestfulApi中的增、删、改三个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BmobApiService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@POST</span>(<span class="string">"/1/classes/&#123;tableName&#125;"</span>)</span><br><span class="line">    <span class="function">Call&lt;JsonObject&gt; <span class="title">insert</span><span class="params">(@Path(<span class="string">"tableName"</span>)</span>String tableName, @Body Object object)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DELETE</span>(<span class="string">"/1/classes/&#123;tableName&#125;/&#123;objectId&#125;"</span>)</span><br><span class="line">    <span class="function">Call&lt;JsonObject&gt; <span class="title">delete</span><span class="params">(@Path(<span class="string">"tableName"</span>)</span>String tableName, @<span class="title">Path</span><span class="params">(<span class="string">"objectId"</span>)</span>String objectId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PUT</span>(<span class="string">"/1/classes/&#123;tableName&#125;/&#123;objectId&#125;"</span>)</span><br><span class="line">    <span class="function">Call&lt;JsonObject&gt; <span class="title">update</span><span class="params">(@Path(<span class="string">"tableName"</span>)</span>String tableName,</span></span><br><span class="line"><span class="function">                            @<span class="title">Path</span><span class="params">(<span class="string">"objectId"</span>)</span>String objectId,</span></span><br><span class="line"><span class="function">                            @Body Object object)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在SDK整个使用过程中常用的数据先用一个BaseConfig类来存放。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String appId = <span class="string">"8b5403b0******ccae9b7057e"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String apiKey = <span class="string">"8e97181******31cbce3e630"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 基础url */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String baseUrl = <span class="string">"https://api.bmob.cn/"</span>;</span><br><span class="line"><span class="comment">/* 是否调试 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> debug = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建Bmob类使用单例模式提供<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bmob</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Bmob INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> BmobApiService mBmobApiService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bmob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line">        builder.connectTimeout(HttpConfig.connectionTime, TimeUnit.SECONDS);</span><br><span class="line">        builder.addInterceptor(InterceptorUtil.headerInterceptor());   <span class="comment">// 使用拦截器在request中添加统一header内容</span></span><br><span class="line">        <span class="keyword">if</span>(HttpConfig.debug)&#123;</span><br><span class="line">            builder.addInterceptor(InterceptorUtil.logInterceptor());   <span class="comment">// 添加日志拦截器</span></span><br><span class="line">        &#125;</span><br><span class="line">        Retrofit mRetrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .client(builder.build())</span><br><span class="line">                .baseUrl(HttpConfig.baseUrl)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 添加gson转换器</span></span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())   <span class="comment">// 添加rxjava转换器</span></span><br><span class="line">                .build();</span><br><span class="line">        mBmobApiService = mRetrofit.create(BmobApiService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bmob <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Bmob.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE)&#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Bmob();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BmobApiService <span class="title">api</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBmobApiService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在OkHttpClient中添加的两个拦截器的定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Log</span><br><span class="line">public class InterceptorUtil &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 在Request中添加Header内容</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Interceptor headerInterceptor()&#123;</span><br><span class="line">        return new Interceptor() &#123;</span><br><span class="line">            public Response intercept(Chain chain) throws IOException &#123;</span><br><span class="line">                Request request = chain.request()</span><br><span class="line">                        .newBuilder()</span><br><span class="line">                        .addHeader(&quot;Content-Type&quot;, &quot;application/json; charset=UTF-8&quot;)</span><br><span class="line">                        .addHeader(&quot;X-Bmob-Application-Id&quot;, HttpConfig.appId)</span><br><span class="line">                        .addHeader(&quot;X-Bmob-REST-API-Key&quot;, HttpConfig.apiKey)</span><br><span class="line">                        .build();</span><br><span class="line">                return chain.proceed(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 日志拦截器</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static HttpLoggingInterceptor logInterceptor()&#123;</span><br><span class="line">        //日志显示级别</span><br><span class="line">        HttpLoggingInterceptor.Level level= HttpLoggingInterceptor.Level.BODY;</span><br><span class="line">        return new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</span><br><span class="line">            public void log(String message) &#123;</span><br><span class="line">                log.log(Level.INFO, message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).setLevel(level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>下面使用Retrofit2的同步方式来请求接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">JsonObject jsonObject = new JsonObject();</span><br><span class="line">jsonObject.addProperty(&quot;playerName&quot;,&quot;张三&quot;);</span><br><span class="line">jsonObject.addProperty(&quot;score&quot;, 59.5);</span><br><span class="line">Call&lt;JsonObject&gt; call = Bmob.getInstance().api().insert(&quot;StudentScore&quot;, jsonObject);</span><br><span class="line">// 同步请求</span><br><span class="line">try &#123;</span><br><span class="line">Response&lt;JsonObject&gt; ret = call.execute();</span><br><span class="line">// 打印接口返回的数据</span><br><span class="line">System.out.println(&quot;result = &quot;+ret.body());</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>代码已提交到GitHub,在原Bmob-Java-SDK项目的<a href="https://github.com/bmob/bmob-java-sdk/tree/v2" target="_blank" rel="noopener">v2</a>分支里。<br>有什么问题或建议可以在项目中提<a href="https://github.com/bmob/bmob-java-sdk/issues" target="_blank" rel="noopener">issues</a>啊。</p><h3 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h3><p>今天基本实现了SDK的框架，这只是开始，接下来会慢慢完善对其他接口的支持，并继续改进和优化SDK的使用方法。</p><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2018/03/01/手摸手一步一步来制作BmobJavaSDK-一/">http://www.googol.tech/2018/03/01/手摸手一步一步来制作BmobJavaSDK-一/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引用的技术&quot;&gt;&lt;a href=&quot;#引用的技术&quot; class=&quot;headerlink&quot; title=&quot;引用的技术&quot;&gt;&lt;/a&gt;引用的技术&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Retrofit2&lt;/li&gt;
&lt;li&gt;RxJava&lt;/li&gt;
&lt;li&gt;Lombok&lt;/li&gt;
&lt;/ul&gt;
      
    
    </summary>
    
    
      <category term="Bmob" scheme="http://www.googol.tech/tags/Bmob/"/>
    
  </entry>
  
  <entry>
    <title>使用BmobJava云函数统计数据</title>
    <link href="http://www.googol.tech/2017/12/27/%E4%BD%BF%E7%94%A8BmobJava%E4%BA%91%E5%87%BD%E6%95%B0%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE/"/>
    <id>http://www.googol.tech/2017/12/27/使用BmobJava云函数统计数据/</id>
    <published>2017-12-27T08:58:00.000Z</published>
    <updated>2017-12-27T09:13:33.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="云函数简介"><a href="#云函数简介" class="headerlink" title="云函数简介"></a>云函数简介</h3><p>云函数是一段部署在服务端的代码片段，通过云函数可以解决很多复杂的业务逻辑，无需将大量的数据发送到客户端做计算处理，大大减轻了客户端业务开发的复杂度。<br>另外，更新云函数代码片段，客户端无需更新，便满足业务改动的需求，这样云函数便有更多的灵活性和自主性。</p><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>目前Bmob云函数支持Node.js和Java两种编程语言。</p><h3 id="云函数执行方式"><a href="#云函数执行方式" class="headerlink" title="云函数执行方式"></a>云函数执行方式</h3><p>创建好的云函数支持三种执行方式：</p><ul><li>定时任务<br>在服务端创建并设置定时任务规则后定时执行指定的云函数</li><li>RESTful Api调用<br>通过Restful api接口调用指定云函数返回执行结果</li><li>SDK调用<br>通过Bmob数据服务提供的相关平台SDK中提供的方法调用指定云函数</li></ul><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>假设现在有一张用户表<code>_User</code>存储注册的用户信息，主要的基本字段如下：<br>| 字段          | 数据类型      |  描述  |<br>| ——–      | :—–:       | —-:  |<br>| username      | String        |  用户名     |<br>| password      | String        |  密码   |<br>| type          | Integer       |  用户类型(1普通用户、2高级用户)  |</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>老板要求统计每天不同类型的用户注册量</p><h3 id="创建云函数"><a href="#创建云函数" class="headerlink" title="创建云函数"></a>创建云函数</h3><p>在Bmob控制台创建countRegister的云函数<br><img src="/2017/12/27/使用BmobJava云函数统计数据/create.png" title="This is an create image"></p><p>创建后台的countRegister云函数的默认内容如下：<br><img src="/2017/12/27/使用BmobJava云函数统计数据/function.png" title="This is an function image"></p><p>在onRequest方法体中我们将实现注册量统计的逻辑，这里需要注意几点：</p><blockquote><ul><li>方法名、入参及返回类型不允许任何修改</li><li>代码中不能包含以下关键字<br>Class<br>File<br>System<br>…</li><li>需要获取当前毫秒时，可用 getTime() 、new java.util.Date().getTime() 替代 System.currentTimeMillis()</li><li>如果确实需要用到被禁止使用的关键字，例如查询”File”表，可用”F”+”ile”的形式拼接</li><li>不可包含/**/注释，如需注释，请用 //</li><li>仅可写一个Java的方法，不能写多个方法、类变量、静态变量等</li><li>云函数执行完毕后，必须用response.send方法返回响应数据，否则会被当做超时，多次超时可能会被暂停使用</li></ul></blockquote><p>了解了以上规则后我们就来开始编写统计数据的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 按type字段进行分组统计</span><br><span class="line">Querier qt = new Querier(&quot;_User&quot;)</span><br><span class="line">                .limit(1000)</span><br><span class="line">                .groupby(&quot;type&quot;)</span><br><span class="line">                .groupcount(true);</span><br><span class="line">// 条件 = 创建时间在12小时内</span><br><span class="line">qt.addWhereGreaterThanOrEqualTo(&quot;createdAt&quot;, new BmobDate(getTime() - 12 * 60 * 60 * 1000));</span><br><span class="line">// 使用oData对象的find方法进行数据的查询统计</span><br><span class="line">HttpResponse httpResponse = modules.oData.find(qt);</span><br><span class="line">// 将查询统计得到的数据通过httpResponse返回给调用云函数的请求方</span><br><span class="line">response.send(httpResponse.jsonData);</span><br></pre></td></tr></table></figure></p><h3 id="调用云函数"><a href="#调用云函数" class="headerlink" title="调用云函数"></a>调用云函数</h3><p>云函数的调用支持以下几种方式：<br>|调用方式    |所需信息    |优点<br>| ——–      | :—–        | :—-  |<br>|SDK            |AppId            |交互自带加密,接入快速<br>|RestApi        |AppId、RestKey    |所有平台适用，通用性强<br>|Http请求        |Secret Key        |所有平台适用，可用浏览器打开</p><p>这里使用Http请求的方式调用<code>countRegister</code>云函数进行测试，在浏览器中请求如下地址：<code>https://javacloud.bmob.cn/****/countRegister</code>,星号请替换为您Bmob应用的<code>SectetKey</code>，<br>这个时候假设当前<code>_User</code>表中存储的数据如下：<br>| username      | password      |  type  |<br>| ——–      | :—–        | :—-  |<br>| zhangsan      | 123456        |  1     |<br>| lisi          | 123456        |  2     |<br>| wangwo        | 123456        |  1     |<br>执行此云函数返回的Json数据将是如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;results&quot;:[&#123;&quot;_count&quot;:1,&quot;type&quot;:2&#125;,&#123;&quot;_count&quot;:2,&quot;type&quot;:1&#125;]&#125;</span><br></pre></td></tr></table></figure></p><p><code>results</code>中的结果分别是普通用户(type=1)和高级用户(type=2)的注册总数。<br>到此已经实现了基本的统计操作，主要是在云函数中使用了数据服务的查询功能来进行统计查询。而实际的业务中可能需要我们将统计的结果存储到相关的数据表中方便以后做报表展示，所以我们接下来继续完善一下这个<code>countRegister</code>云函数，将统计的结果存储到一张表中。</p><h3 id="保存统计数据"><a href="#保存统计数据" class="headerlink" title="保存统计数据"></a>保存统计数据</h3><p>新建一个<code>Statistics</code>表,存储统计后的结果，结构如下：<br>| 字段          | 数据类型      |  描述  |<br>| ——–      | :—–:       | —-:  |<br>| generalUserCount          | Integer       |  普通用户注册数量     |<br>| advancedUserCount         | Integer       |  高级用户注册数量   |</p><p>加入存储统计数据的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 按type字段进行分组统计</span><br><span class="line">Querier qt = new Querier(&quot;_User&quot;)</span><br><span class="line">                .limit(1000)</span><br><span class="line">                .groupby(&quot;type&quot;)</span><br><span class="line">                .groupcount(true);</span><br><span class="line">// 条件 = 创建时间在12小时内</span><br><span class="line">qt.addWhereGreaterThanOrEqualTo(&quot;createdAt&quot;, new BmobDate(getTime() - 12 * 60 * 60 * 1000));</span><br><span class="line">// 使用oData对象的find方法进行数据的查询统计</span><br><span class="line">HttpResponse httpResponse = modules.oData.find(qt);</span><br><span class="line">// 将查询统计得到的数据通过httpResponse返回给调用云函数的请求方</span><br><span class="line">//response.send(httpResponse.jsonData);</span><br><span class="line">        </span><br><span class="line">JSONArray results = httpResponse.jsonData.getJSONArray(&quot;results&quot;);</span><br><span class="line">if (results == null) &#123;</span><br><span class="line">    response.send(httpResponse.data);   // 请求有错误，直接返回全部内容</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    JSONObject statisticsData = new JSONObject();</span><br><span class="line">    for(int i = 0; i &lt; results.size(); i++)&#123;</span><br><span class="line">        JSONObject obj = results.getJSONObject(i);</span><br><span class="line">        int type = obj.getInteger(&quot;type&quot;);</span><br><span class="line">        int count = obj.getInteger(&quot;_count&quot;);</span><br><span class="line">        if(type == 1)&#123;</span><br><span class="line">            // 普通用户总数</span><br><span class="line">            statisticsData.put(&quot;generalUserCount&quot;, count);</span><br><span class="line">        &#125;else if(type == 2)&#123;</span><br><span class="line">            // 高级用户总数</span><br><span class="line">            statisticsData.put(&quot;advancedUserCount&quot;, count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 保存数据并返回执行结果</span><br><span class="line">    response.send(modules.oData.insert(&quot;Statistics&quot;, statisticsData).stringData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存好代码后再次调用该云函数，返回结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;createdAt&quot;: &quot;2017-12-27 16:04:35&quot;,&quot;objectId&quot;: &quot;8401a6d2d9&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>表示插入<code>Statistics</code>表数据成功后返回的数据objectId和创建时间，Bmob控制台数据浏览<code>Statistics</code>表，已经存在统计后的数据了：<br><img src="/2017/12/27/使用BmobJava云函数统计数据/statistics.png" title="This is an statistics image"></p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>上面的云函数已经基本完成了用户注册数的统计以及保存统计数据的工作，但是当我们需要统计的时候还需要手动的调用<code>countRegister</code>云函数才行。实际上我们可以创建一个定时任务在固定时间来执行这个统计操作。在云函数的编写页面选择定时任务，设置执行规则后保存即可，具体设置如下：<br><img src="/2017/12/27/使用BmobJava云函数统计数据/timing_tasks.png" title="This is an timing_tasks image"><br>上面的规则是每天的23点执行该云函数，定时任务的执行规则可以参考<a href="http://doc.bmob.cn/cloud_function/web/timing_tasks/" target="_blank" rel="noopener">定时任务</a>文档说明。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文以一个统计用户注册数量的简单实例来讲解了Bmob云函数的使用，主要在云函数中使用到了数据服务的查询数据和插入数据来实现，并在最后介绍了定时任务+云函数的搭配使用。很多时候，单纯的前端代码是不能完成全部事情的，一些重要和复杂的业务逻辑还是希望能够在服务端中执行。比如：对比较大量的比赛数据进行排序、对某些数据进行分析和处理、获取用户的IP信息等等。</p><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2017/12/27/使用BmobJava云函数统计数据/">http://www.googol.tech/2017/12/27/使用BmobJava云函数统计数据/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;云函数简介&quot;&gt;&lt;a href=&quot;#云函数简介&quot; class=&quot;headerlink&quot; title=&quot;云函数简介&quot;&gt;&lt;/a&gt;云函数简介&lt;/h3&gt;&lt;p&gt;云函数是一段部署在服务端的代码片段，通过云函数可以解决很多复杂的业务逻辑，无需将大量的数据发送到客户端做计算处理，大
      
    
    </summary>
    
    
      <category term="Bmob" scheme="http://www.googol.tech/tags/Bmob/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot消费BmobAPI</title>
    <link href="http://www.googol.tech/2017/11/17/SpringBoot%E6%B6%88%E8%B4%B9BmobAPI/"/>
    <id>http://www.googol.tech/2017/11/17/SpringBoot消费BmobAPI/</id>
    <published>2017-11-17T02:51:00.000Z</published>
    <updated>2017-11-24T08:30:21.244Z</updated>
    
    <content type="html"><![CDATA[<p>在大部分的情况下，使用客户端开发时调用Bmob的服务是比较常见的，比如开发Android、iOS应用程序等等。这样做能够直接省去服务端开发该做的事情，一方面降低了开发成本，另一方面也提高了客户端开发的速度，对于开发人员来说真的是一树百获啊。</p><p>上面说的这些大家不要认为是在打广告或是写软文，其实纯粹就是一个普通使用者对一个产品使用后的真实感受的表达，如果你非要这样认为，就怪程序员不太会用社会语言写文章吧。好了，还是少解释，咱们坐下来开始聊代码吧。</p><h3 id="使用到的资源"><a href="#使用到的资源" class="headerlink" title="使用到的资源"></a>使用到的资源</h3><ul><li><a href="https://docs.bmob.cn/data/Restful/b_developdoc/doc/index.html" target="_blank" rel="noopener">BmobRestfulAPI文档</a></li></ul><h3 id="SpringBoot项目"><a href="#SpringBoot项目" class="headerlink" title="SpringBoot项目"></a>SpringBoot项目</h3><p>本来是想从创建SpringBoot项目开始讲的，想想还是算了(主要是懒)，因为基本都是IDEA的步骤说明，都是截图，其实都不是这篇文章的重点。所以，这里就主要说明一下项目所使用的类库有哪些，项目是由maven构建的，pom.xml文件中dependencies部分具体配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.31&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></p><p>主要是spring-boot-starter-web，因为是一个web项目所以是必须的。<br>其次是fastjson，主要是用于Json数据的转换处理。<br>另一个lombok，是我比较喜欢用的一个库，基本是每个项目必备，它能让我写代码更加简洁和方便，提高效率，这里也强烈推荐给大家，具体的使用和介绍，可以自行Google了解。</p><img src="/2017/11/17/SpringBoot消费BmobAPI/project.png" title="This is an project image"><h3 id="编写Config类"><a href="#编写Config类" class="headerlink" title="编写Config类"></a>编写Config类</h3><p>工程的基本结构如上图所示，在基础的SpringBoot项目上新建了DemoConfig.java、DemoController.java两个类，接下来一一介绍，首先是DemoConfig.java类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package tech.googol.demo;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class DemoConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate restTemplate()&#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用@Configuration注解标识DemoConfig类是一个配置类，SpringBoot会自动处理此标识下的相关配置，其中我们使用@Bean注解在restTemplate方法上，表示将该方法返回的RestTemplate实例交由Spring上下文管理，这样就可以在需要使用RestTemplate的地方通过@Autowired注解来调用这个实例进行使用了。</p><h3 id="编写Controller类"><a href="#编写Controller类" class="headerlink" title="编写Controller类"></a>编写Controller类</h3><p>下面就看看怎么在DemoController类中使用RestTemplate对象来调用BmobRestfulAPI吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package tech.googol.demo;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.http.*;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">public class DemoController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">//Bmob获取服务器时间的接口地址</span><br><span class="line">    String url = &quot;https://api.bmob.cn/1/timestamp&quot;;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/time&quot;)</span><br><span class="line">    public ResponseEntity getServiceTime()&#123;</span><br><span class="line">        HttpHeaders headers = new HttpHeaders();</span><br><span class="line">        MediaType type = MediaType.parseMediaType(&quot;application/json; charset=UTF-8&quot;);</span><br><span class="line">        headers.setContentType(type);</span><br><span class="line">        headers.add(&quot;X-Bmob-Application-Id&quot;, &quot;4b5f22926******312c2f1e027c4071e&quot;);</span><br><span class="line">        headers.add(&quot;X-Bmob-REST-API-Key&quot;, &quot;4af231ed9******bcb9ab847af29a7f4&quot;);</span><br><span class="line">        HttpEntity&lt;Object&gt; requestEntity = new HttpEntity&lt;Object&gt;(headers);</span><br><span class="line">        ResponseEntity&lt;JSONObject&gt; result = restTemplate.exchange(url, HttpMethod.GET, requestEntity, JSONObject.class);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里先简单的用一个方法来调用Bmob的获取服务器时间的接口，如果能正常返回服务器时间，那么则表示调用Bmob服务接口是成功的。</p><p>@RestController注解是Spring4之后新加入的注解，它是@ResponseBody和@Controller的组合注解。因为只是为了做一个RestfulAPI项目，不是普通的Web项目，不需要做视图页面的跳转，所以直接使用@RestController，而不使用@Controller。</p><p>@Autowired注解自动装配RestTemplate对象到DemoController类中以供使用。</p><p>@GetMapping注解也是Spring4引入的一个组合注解，它是@RequestMapping(method = RequestMethod.GET)的缩写。@GetMapping(“/time”)表示提供一个GET请求方式的”/time”接口，该接口具体的实现在getServiceTime()方法中完成。</p><p>在这里我们在getServiceTime()方法中使用restTemplate对象调用了Bmob的获取服务器时间接口<a href="https://api.bmob.cn/1/timestamp" target="_blank" rel="noopener">https://api.bmob.cn/1/timestamp</a>，并将接口返回的数据直接return出去,也就是作为”/time”接口的数据返回。</p><h3 id="RestTemplate的使用"><a href="#RestTemplate的使用" class="headerlink" title="RestTemplate的使用"></a>RestTemplate的使用</h3><p>这里重点讲一下RestTemplate请求BmobApi的部分。<br>使用的是RestTemplate对象的exchange方法来发起一次Http请求，第一个参数是请求的接口地址，第二个参数是Http请求的方式HttpMethod.GET，第三个参数是本次请求所传入的参数，这里是将接口所需的Header参数通过添加到HttpEntity对象中进行传入的，第四个参数是本次请求response返回数据的封装格式，这里是封装成JsonObject对象进行返回。</p><h3 id="简单封装一下"><a href="#简单封装一下" class="headerlink" title="简单封装一下"></a>简单封装一下</h3><p>上面只是为了快速检验一下能否正常请求和响应数据，所以所有的事情都在一个方法中解决了。这也是绝大多数程序员在开发过程中经常会做的事情，为了验证一个想法是否可行，会先以简单快速的方法去实践，确认可行后再展开更加详细的架构设计。<br>这里我们就一步一步来，先将getServiceTime方法的实现进行拆分一下，尽量达到代码的可重用性，因为调用任何BmobRestfulAPI时，Header中都必须传递两个参数X-Bmob-Application-Id、X-Bmob-REST-API-Key,并且需要制定Content-Type为”application/json”,所以我们可以先将这部分的代码单独拿出来在另一个方法中实现，暂且命名为generateRequestEntity方法,并重载一个无参的，以方便在请求BmobRestfulAPI时需要在body中传递参数和不需要传参的情形进行使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private HttpEntity generateRequestEntity()&#123;</span><br><span class="line">return generateRequestEntity(null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private HttpEntity generateRequestEntity(Object bodyData)&#123;</span><br><span class="line">  HttpHeaders headers = new HttpHeaders();</span><br><span class="line">  MediaType type = MediaType.parseMediaType(&quot;application/json; charset=UTF-8&quot;);</span><br><span class="line">  headers.setContentType(type);</span><br><span class="line">  headers.add(&quot;X-Bmob-Application-Id&quot;, &quot;4b5f22926******312c2f1e027c4071e&quot;);</span><br><span class="line">  headers.add(&quot;X-Bmob-REST-API-Key&quot;, &quot;4af231ed9******bcb9ab847af29a7f4&quot;);</span><br><span class="line">  HttpEntity&lt;Object&gt; requestEntity;</span><br><span class="line">  if(null != bodyData)&#123;</span><br><span class="line">  requestEntity = new HttpEntity&lt;Object&gt;(bodyData, headers);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">  requestEntity = new HttpEntity&lt;Object&gt;(headers);</span><br><span class="line">  &#125;</span><br><span class="line">  return requestEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动SpringBoot项目，在浏览器直接访问<code>http://localhost:8080/time</code> 接口，以Json格式返回Bmob服务器时间。下图为IDEA中使用REST Client访问返回的结果：</p><img src="/2017/11/17/SpringBoot消费BmobAPI/test.png" title="This is an test image"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要讲解了怎样在SpringBoot项目中访问BmobApi接口这一个知识点，通过使用RestTemplate访问获取服务器时间的接口，完成了一次简单的Http Get请求，并正确得到服务器返回的数据结果，这让我们对接下来使用BmobApi的其他接口提供了可靠的保证，最后祝大家编程愉快。</p><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2017/11/17/SpringBoot消费BmobAPI/">http://www.googol.tech/2017/11/17/SpringBoot消费BmobAPI/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在大部分的情况下，使用客户端开发时调用Bmob的服务是比较常见的，比如开发Android、iOS应用程序等等。这样做能够直接省去服务端开发该做的事情，一方面降低了开发成本，另一方面也提高了客户端开发的速度，对于开发人员来说真的是一树百获啊。&lt;/p&gt;
&lt;p&gt;上面说的这些大家不
      
    
    </summary>
    
    
      <category term="Bmob" scheme="http://www.googol.tech/tags/Bmob/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7系统安装</title>
    <link href="http://www.googol.tech/2017/11/16/CentOS-7%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://www.googol.tech/2017/11/16/CentOS-7系统安装/</id>
    <published>2017-11-16T10:18:00.000Z</published>
    <updated>2017-11-16T10:24:26.392Z</updated>
    
    <content type="html"><![CDATA[<h3 id="制作U盘镜像"><a href="#制作U盘镜像" class="headerlink" title="制作U盘镜像"></a>制作U盘镜像</h3><h4 id="1-下载cengos-iso镜像文件"><a href="#1-下载cengos-iso镜像文件" class="headerlink" title="1.下载cengos iso镜像文件"></a>1.下载cengos iso镜像文件</h4><p>使用阿里提供的国内下载地址<br><a href="http://mirrors.aliyun.com/centos/" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos/</a><br>这里选择的是如下版本<br><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso</a> </p><h4 id="2-使用UltraISO工具刻录到U盘"><a href="#2-使用UltraISO工具刻录到U盘" class="headerlink" title="2.使用UltraISO工具刻录到U盘"></a>2.使用UltraISO工具刻录到U盘</h4><p>U盘大小要求8G以上<br>工具的使用方法参考百度经验：<a href="http://jingyan.baidu.com/article/363872ec8b4f6a6e4ba16f2b.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/363872ec8b4f6a6e4ba16f2b.html</a></p><h3 id="设置Boot从U盘启动"><a href="#设置Boot从U盘启动" class="headerlink" title="设置Boot从U盘启动"></a>设置Boot从U盘启动</h3><p>启动是进入Boot模式选择U盘启动<br>然后参照如下几个教程进行系统安装：<br><a href="http://linux.it.net.cn/CentOS/fast/2016/1229/25698.html" target="_blank" rel="noopener">http://linux.it.net.cn/CentOS/fast/2016/1229/25698.html</a><br><a href="https://www.xiariboke.com/computer/3625.html" target="_blank" rel="noopener">https://www.xiariboke.com/computer/3625.html</a><br><a href="https://micorochio.github.io/2017/01/14/add-centos-to-win10/" target="_blank" rel="noopener">https://micorochio.github.io/2017/01/14/add-centos-to-win10/</a></p><h3 id="没有ifconfig命令的解决办法"><a href="#没有ifconfig命令的解决办法" class="headerlink" title="没有ifconfig命令的解决办法"></a>没有ifconfig命令的解决办法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum search ifconfig</span><br><span class="line">yum install net-tools.x86_64</span><br></pre></td></tr></table></figure><h3 id="可能遇到的一些问题"><a href="#可能遇到的一些问题" class="headerlink" title="可能遇到的一些问题"></a>可能遇到的一些问题</h3><ul><li>使用yum 命令是遇到Could not retrieve mirrorlist <a href="http://mirrorlist.centos.org/相关错误" target="_blank" rel="noopener">http://mirrorlist.centos.org/相关错误</a></li></ul><p>解决办法：<br>修改/etc/sysconfig/network-scripts/ifcfg-xxx文件中的如下两项内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ONBOOT=yes</span><br><span class="line">MM_CONTROLLED=no</span><br></pre></td></tr></table></figure></p><p>修改完成后台重启</p><h3 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h3><p>1.修改网卡配置<br>vi /etc/sysconfig/network-scripts/ifcfg-xxx xxx是具体的网卡名称，不同的机器安装os后的可能不一样，按实际情况修改成自己的网卡名称<br>将ifcfg-xxx的内容修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">NAME=enp2s0</span><br><span class="line">DEVICE=enp2s0</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">BROADCAST=192.168.1.255</span><br><span class="line">UUID=b1800d7d-b58e-4fcb-a109-1b12068227e3</span><br><span class="line">IPADDR=192.168.1.11</span><br><span class="line">IPV6INIT=no</span><br><span class="line">IPV6_AUTOCONF=no</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">NETWORK=192.168.1.1</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure></p><p>每项解释如下：<br>DEVICE=eth0 #描述网卡对应的设备别名<br>HWADDR=00:07:E9:05:E8:B4 #对应的网卡网卡地址,即mac地址<br>TYPE=Ethernet#表示网络类型是以太网<br>UUID：网卡的UUID（文件里可以没有）<br>ONBOOT=yes#系统启动时自动加载eth0<br>NM_CONTROLLED=yes#设备是否被NetworkManager管理<br>BOOTPROTO=static#通过不同协议设置网卡获得ip地址的方式,–静态static –bootp –dhcp<br>IPADDR=192.168.1.11#设置网卡IP地址<br>NETMASK=255.255.255.0#设置网卡掩码地址<br>NETWORK=192.168.1.1#设置网卡对应的网络地址<br>BROADCAST=192.168.1.255#设置网卡对应网络的广播地址</p><p>2.修改网关配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network</span><br></pre></td></tr></table></figure></p><p>添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GATEWAY=192.168.1.1</span><br></pre></td></tr></table></figure></p><p>3.修改DNS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br></pre></td></tr></table></figure></p><p>添加两个dns<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure></p><p>4.重启网络服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></p><p>5.在另一台机器上验证是否可以ping通<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.1.11</span><br></pre></td></tr></table></figure></p><h3 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget </span><br><span class="line">yum -y install setup </span><br><span class="line">yum -y install perl</span><br></pre></td></tr></table></figure><p>如果出现GCC..相关错误，则需要先安装GCC</p><p>将gcc和make一起装好<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc make</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1.查看端口占用情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure></p><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line"></span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure><p>重启后生效</p><h4 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h4><ul><li><p>永久有效<br>修改 /etc/selinux/config 文件中的 SELINUX=”” 为 disabled ，然后重启。</p></li><li><p>即时生效</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2017/11/16/CentOS-7系统安装/">http://www.googol.tech/2017/11/16/CentOS-7系统安装/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;制作U盘镜像&quot;&gt;&lt;a href=&quot;#制作U盘镜像&quot; class=&quot;headerlink&quot; title=&quot;制作U盘镜像&quot;&gt;&lt;/a&gt;制作U盘镜像&lt;/h3&gt;&lt;h4 id=&quot;1-下载cengos-iso镜像文件&quot;&gt;&lt;a href=&quot;#1-下载cengos-iso镜像文件&quot;
      
    
    </summary>
    
    
      <category term="CentOS" scheme="http://www.googol.tech/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装Jenkins</title>
    <link href="http://www.googol.tech/2017/11/16/CentOS-7%E5%AE%89%E8%A3%85Jenkins/"/>
    <id>http://www.googol.tech/2017/11/16/CentOS-7安装Jenkins/</id>
    <published>2017-11-16T09:52:00.000Z</published>
    <updated>2017-11-16T10:04:47.824Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看Jenkinsg最新稳定版"><a href="#查看Jenkinsg最新稳定版" class="headerlink" title="查看Jenkinsg最新稳定版"></a>查看Jenkinsg最新稳定版</h3><p><a href="https://pkg.jenkins.io/redhat-stable/" target="_blank" rel="noopener">https://pkg.jenkins.io/redhat-stable/</a></p><h3 id="yum-方式安装"><a href="#yum-方式安装" class="headerlink" title="yum 方式安装"></a>yum 方式安装</h3><p>1.下载依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br></pre></td></tr></table></figure></p><p>2.导入秘钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure></p><p>3.安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure></p><h3 id="查看jenkins安装路径"><a href="#查看jenkins安装路径" class="headerlink" title="查看jenkins安装路径"></a>查看jenkins安装路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql jenkins</span><br><span class="line"></span><br><span class="line">/etc/init.d/jenkins</span><br><span class="line">/etc/logrotate.d/jenkins</span><br><span class="line">/etc/sysconfig/jenkins</span><br><span class="line">/usr/lib/jenkins</span><br><span class="line">/usr/lib/jenkins/jenkins.war</span><br><span class="line">/usr/sbin/rcjenkins</span><br><span class="line">/var/cache/jenkins</span><br><span class="line">/var/lib/jenkins</span><br><span class="line">/var/log/jenkins</span><br></pre></td></tr></table></figure><p>/usr/lib/jenkins/：jenkins安装目录，war包会放在这里。<br>/etc/sysconfig/jenkins：jenkins配置文件，“端口”，“JENKINS_HOME”等都可以在这里配置。<br>/var/lib/jenkins/：默认的JENKINS_HOME。<br>/var/log/jenkins/jenkins.log：jenkins日志文件。</p><h3 id="启动-停止"><a href="#启动-停止" class="headerlink" title="启动/停止"></a>启动/停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service jenkins start/stop/restart</span><br><span class="line">sudo chkconfig jenkins on</span><br></pre></td></tr></table></figure><p>查看jenkins状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status jenkins</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>将jenkins用户添加进docker用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker jenkins</span><br><span class="line">sudo systemctl restart jenkins</span><br></pre></td></tr></table></figure></p><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2017/11/16/CentOS-7安装Jenkins/">http://www.googol.tech/2017/11/16/CentOS-7安装Jenkins/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看Jenkinsg最新稳定版&quot;&gt;&lt;a href=&quot;#查看Jenkinsg最新稳定版&quot; class=&quot;headerlink&quot; title=&quot;查看Jenkinsg最新稳定版&quot;&gt;&lt;/a&gt;查看Jenkinsg最新稳定版&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://p
      
    
    </summary>
    
      <category term="Jenkins" scheme="http://www.googol.tech/categories/Jenkins/"/>
    
    
      <category term="CentOS" scheme="http://www.googol.tech/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装Docker</title>
    <link href="http://www.googol.tech/2017/11/16/CentOS-7%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://www.googol.tech/2017/11/16/CentOS-7安装Docker/</id>
    <published>2017-11-16T09:49:00.000Z</published>
    <updated>2017-11-16T10:03:53.174Z</updated>
    
    <content type="html"><![CDATA[<h3 id="检查内核版本"><a href="#检查内核版本" class="headerlink" title="检查内核版本"></a>检查内核版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p><strong>docker需要的内核版本是3.10</strong></p><h3 id="更新yum包"><a href="#更新yum包" class="headerlink" title="更新yum包"></a>更新yum包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><h3 id="rpm-方式安装"><a href="#rpm-方式安装" class="headerlink" title="rpm 方式安装"></a>rpm 方式安装</h3><h4 id="下载rpm包"><a href="#下载rpm包" class="headerlink" title="下载rpm包"></a>下载rpm包</h4><p>到<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/下载对应的.rpm文件" target="_blank" rel="noopener">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/下载对应的.rpm文件</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O -sSL https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.06.0.ce-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure></p><h4 id="安装rpm包"><a href="#安装rpm包" class="headerlink" title="安装rpm包"></a>安装rpm包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum localinstall --nogpgcheck docker-ce-17.06.0.ce-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="启动Docker服务"><a href="#启动Docker服务" class="headerlink" title="启动Docker服务"></a>启动Docker服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 设置开机启动</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">// 启动docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="验证Docker"><a href="#验证Docker" class="headerlink" title="验证Docker"></a>验证Docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hell-world</span><br></pre></td></tr></table></figure><h3 id="使用Docker加速器"><a href="#使用Docker加速器" class="headerlink" title="使用Docker加速器"></a>使用Docker加速器</h3><p>因为国内的原因，可以使用加速器，这样在下载镜像时会比较快。<br>针对Docker客户端版本大于1.10的用户，可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>以上是使用的阿里云提供的加速器，给每个用户提供的地址都不一样，可更改为自己的。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>有时centos 中的docker启动会出错，和存储相关的错误，可以在/etc/docker/daemon.json文件中添加”storage-driver”: “devicemapper”，然后重启即可。</p><h3 id="Docker清理"><a href="#Docker清理" class="headerlink" title="Docker清理"></a>Docker清理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 杀死所有正在运行的容器</span><br><span class="line">docker kill $(docker ps -a -q)</span><br><span class="line"># 删除所有已经停止的容器</span><br><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line"># 删除所有未打 dangling 标签的镜像</span><br><span class="line">docker rmi $(docker images -q -f dangling=true)</span><br><span class="line"># 删除所有镜像</span><br><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="卸载旧的docker和依赖包"><a href="#卸载旧的docker和依赖包" class="headerlink" title="卸载旧的docker和依赖包"></a>卸载旧的docker和依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">  docker-common \</span><br><span class="line">  container-selinux \</span><br><span class="line">  docker-selinux \</span><br><span class="line">  docker-engine</span><br></pre></td></tr></table></figure><h3 id="卸载Docker-CE"><a href="#卸载Docker-CE" class="headerlink" title="卸载Docker CE"></a>卸载Docker CE</h3><p>1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker-ce</span><br></pre></td></tr></table></figure></p><p>Note：镜像，容器，卷和配置文件不是被自动移除的，需要手动删除</p><p>2.删除所有的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></p><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2017/11/16/CentOS-7安装Docker/">http://www.googol.tech/2017/11/16/CentOS-7安装Docker/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;检查内核版本&quot;&gt;&lt;a href=&quot;#检查内核版本&quot; class=&quot;headerlink&quot; title=&quot;检查内核版本&quot;&gt;&lt;/a&gt;检查内核版本&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Docker" scheme="http://www.googol.tech/categories/Docker/"/>
    
    
      <category term="CentOS" scheme="http://www.googol.tech/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装JDK</title>
    <link href="http://www.googol.tech/2017/11/16/CentOS-7%E5%AE%89%E8%A3%85JDK/"/>
    <id>http://www.googol.tech/2017/11/16/CentOS-7安装JDK/</id>
    <published>2017-11-16T09:46:00.000Z</published>
    <updated>2017-11-16T10:00:12.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="yum-方式安装JDK"><a href="#yum-方式安装JDK" class="headerlink" title="yum 方式安装JDK"></a>yum 方式安装JDK</h3><h4 id="1-首先查看JDK软件包列表"><a href="#1-首先查看JDK软件包列表" class="headerlink" title="1.首先查看JDK软件包列表"></a>1.首先查看JDK软件包列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">yum search java | grep -i --color JDK</span><br><span class="line"></span><br><span class="line">ldapjdk-javadoc.noarch : Javadoc for ldapjdk</span><br><span class="line">icedtea-web.x86_64 : Additional Java components for OpenJDK - Java browser</span><br><span class="line">java-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos</span><br><span class="line">java-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment</span><br><span class="line">java-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation</span><br><span class="line">java-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle</span><br><span class="line">java-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.7.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connector</span><br><span class="line">java-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos</span><br><span class="line">java-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment</span><br><span class="line">java-1.7.0-openjdk-headless.x86_64 : The OpenJDK runtime environment without</span><br><span class="line">java-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation</span><br><span class="line">java-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle</span><br><span class="line">java-1.8.0-openjdk.i686 : OpenJDK Runtime Environment</span><br><span class="line">java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.8.0-openjdk-accessibility.i686 : OpenJDK accessibility connector</span><br><span class="line">java-1.8.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connector</span><br><span class="line">java-1.8.0-openjdk-accessibility-debug.i686 : OpenJDK accessibility connector</span><br><span class="line">java-1.8.0-openjdk-accessibility-debug.x86_64 : OpenJDK accessibility connector</span><br><span class="line">java-1.8.0-openjdk-debug.i686 : OpenJDK Runtime Environment with full debug on</span><br><span class="line">java-1.8.0-openjdk-debug.x86_64 : OpenJDK Runtime Environment with full debug on</span><br><span class="line">java-1.8.0-openjdk-demo.i686 : OpenJDK Demos</span><br><span class="line">java-1.8.0-openjdk-demo.x86_64 : OpenJDK Demos</span><br><span class="line">java-1.8.0-openjdk-demo-debug.i686 : OpenJDK Demos with full debug on</span><br><span class="line">java-1.8.0-openjdk-demo-debug.x86_64 : OpenJDK Demos with full debug on</span><br><span class="line">java-1.8.0-openjdk-devel.i686 : OpenJDK Development Environment</span><br><span class="line">java-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environment</span><br><span class="line">java-1.8.0-openjdk-devel-debug.i686 : OpenJDK Development Environment with full</span><br><span class="line">java-1.8.0-openjdk-devel-debug.x86_64 : OpenJDK Development Environment with</span><br><span class="line">java-1.8.0-openjdk-headless.i686 : OpenJDK Runtime Environment</span><br><span class="line">java-1.8.0-openjdk-headless.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.8.0-openjdk-headless-debug.i686 : OpenJDK Runtime Environment with full</span><br><span class="line">java-1.8.0-openjdk-headless-debug.x86_64 : OpenJDK Runtime Environment with full</span><br><span class="line">java-1.8.0-openjdk-javadoc.noarch : OpenJDK API Documentation</span><br><span class="line">java-1.8.0-openjdk-javadoc-debug.noarch : OpenJDK API Documentation for packages</span><br><span class="line">java-1.8.0-openjdk-javadoc-zip.noarch : OpenJDK API Documentation compressed in</span><br><span class="line">java-1.8.0-openjdk-javadoc-zip-debug.noarch : OpenJDK API Documentation</span><br><span class="line">java-1.8.0-openjdk-src.i686 : OpenJDK Source Bundle</span><br><span class="line">java-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundle</span><br><span class="line">java-1.8.0-openjdk-src-debug.i686 : OpenJDK Source Bundle for packages with</span><br><span class="line">java-1.8.0-openjdk-src-debug.x86_64 : OpenJDK Source Bundle for packages with</span><br><span class="line">ldapjdk.noarch : The Mozilla LDAP Java SDK</span><br></pre></td></tr></table></figure><p>然后选择需要的版本安装，这里我选择java-1.8.0-openjdk.x86_64进行安装</p><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk.x86_64</span><br><span class="line">yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure><h4 id="3-验证验证是否成功"><a href="#3-验证验证是否成功" class="headerlink" title="3.验证验证是否成功"></a>3.验证验证是否成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line"></span><br><span class="line">openjdk version &quot;1.8.0_144&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_144-b01)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.144-b01, mixed mode)</span><br></pre></td></tr></table></figure><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2017/11/16/CentOS-7安装JDK/">http://www.googol.tech/2017/11/16/CentOS-7安装JDK/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;yum-方式安装JDK&quot;&gt;&lt;a href=&quot;#yum-方式安装JDK&quot; class=&quot;headerlink&quot; title=&quot;yum 方式安装JDK&quot;&gt;&lt;/a&gt;yum 方式安装JDK&lt;/h3&gt;&lt;h4 id=&quot;1-首先查看JDK软件包列表&quot;&gt;&lt;a href=&quot;#1-首
      
    
    </summary>
    
    
      <category term="CentOS" scheme="http://www.googol.tech/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建本地镜像仓库</title>
    <link href="http://www.googol.tech/2017/11/16/Docker%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>http://www.googol.tech/2017/11/16/Docker搭建本地镜像仓库/</id>
    <published>2017-11-16T08:44:00.000Z</published>
    <updated>2017-11-16T10:02:03.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载registry镜像"><a href="#下载registry镜像" class="headerlink" title="下载registry镜像"></a>下载registry镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><h3 id="运行registry容器"><a href="#运行registry容器" class="headerlink" title="运行registry容器"></a>运行registry容器</h3><p>因为是用的容器来做本地镜像仓库的，默认情况下存储的内容是在容器内部的，当容器被删除时，则存放在容器中的镜像也会丢失。<br>所以一般情况下载运行registry容器时，可以使用一个本机目录挂载到容器的/var/lib/registry目录，这样当registry容器删除时，<br>上传到本地镜像仓库的镜像文件就不会随着容器的删除而丢失了。<br>这里我使用的是本机目录/opt/data/bmob-dockerhub<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 -v /opt/data/bmob-dockerhub:/var/lib/registry --name bmob-dockerhub registry</span><br></pre></td></tr></table></figure></p><h3 id="测试上传镜像到本地仓库中"><a href="#测试上传镜像到本地仓库中" class="headerlink" title="测试上传镜像到本地仓库中"></a>测试上传镜像到本地仓库中</h3><p>1.首先用一个小镜像来做测试，这里是下载的busybox镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull busybox</span><br></pre></td></tr></table></figure></p><p>2.然后打个tag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag busybox 192.168.1.13:5000/busybox</span><br></pre></td></tr></table></figure></p><p>这里是用192.168.1.13这台机做本地仓库的</p><p>3.push到仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.1.13:5000/busybox</span><br></pre></td></tr></table></figure></p><p>可能遇到的错误：<br>The push refers to a repository [192.168.1.13:5000/busybox]<br>Get <a href="https://192.168.1.13:5000/v2/" target="_blank" rel="noopener">https://192.168.1.13:5000/v2/</a>: http: server gave HTTP response to HTTPS client</p><p>解决方法：<br>在/etc/docker/daemon.json文件中添加下面一条数据<br>{ “insecure-registries”: [“192.168.1.13:5000”] }<br>然后重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>将registry容器运行起来，再push就可以成功了</p><h3 id="测试从本地仓库中拉取镜像"><a href="#测试从本地仓库中拉取镜像" class="headerlink" title="测试从本地仓库中拉取镜像"></a>测试从本地仓库中拉取镜像</h3><p>1.先将本机中的busybox镜像和192.168.1.13:5000/busybox镜像删除</p><p>2.拉取镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.1.13:5000/busybox</span><br></pre></td></tr></table></figure></p><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2017/11/16/Docker搭建本地镜像仓库/">http://www.googol.tech/2017/11/16/Docker搭建本地镜像仓库/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载registry镜像&quot;&gt;&lt;a href=&quot;#下载registry镜像&quot; class=&quot;headerlink&quot; title=&quot;下载registry镜像&quot;&gt;&lt;/a&gt;下载registry镜像&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://www.googol.tech/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.googol.tech/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Node 安装与配置(Ubuntu系统)</title>
    <link href="http://www.googol.tech/2017/08/23/Kubernetes-Node-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-Ubuntu%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.googol.tech/2017/08/23/Kubernetes-Node-安装与配置-Ubuntu系统/</id>
    <published>2017-08-23T09:44:08.000Z</published>
    <updated>2017-08-24T08:05:58.129Z</updated>
    
    <content type="html"><![CDATA[<p>内网下已经搭建好Kubernetes集群，由两台CentOS组成。</p><blockquote><p>192.168.1.11 Master<br>192.168.1.12 Node</p></blockquote><p>由于之前搭建时操作的都是CentOS系统中的安装与配置，与Ubuntu下还是有些区别。这里主要记录下将Ubuntu系统的主机加入到Kubernetes集群中的操作步骤。</p><blockquote><p>待操作的主机基本情况</p><p>Ubuntu 版本: 16.04<br>IP: 192.168.1.13</p></blockquote><p>因为在kubernetes节点上需要运行kubelet、kube-proxy、docker和flannel服务并进行相关配置才能正常加入到集群中，所以先一个服务一个服务来安装。</p><p>kubelet和kube-proxy两个都属于Kubernetes源码相关的，所先下载下来。<br>Client二进制下载：<a href="https://dl.k8s.io/v1.5.5/kubernetes-client-linux-amd64.tar.gz" target="_blank" rel="noopener">https://dl.k8s.io/v1.5.5/kubernetes-client-linux-amd64.tar.gz</a><br>Server二进制下载：<a href="https://dl.k8s.io/v1.5.5/kubernetes-server-linux-amd64.tar.gz" target="_blank" rel="noopener">https://dl.k8s.io/v1.5.5/kubernetes-server-linux-amd64.tar.gz</a> </p><p>实际上只需要用到kubernetes-server-linux-amd64，kubernetes-client-linux-amd64中只有一个kubectl,这是master上需要用的，这里只是负责node节点的部署所以用不上。<br>解压kubernetes-server-linux-amd64.tar.gz，将/server/bin/目录下的kubelet、kube-proxy拷贝到/usr/bin/目录下。</p><h2 id="通用配置"><a href="#通用配置" class="headerlink" title="通用配置"></a>通用配置</h2><p>这部分内容是Master与Node上通用的配置操作</p><h3 id="创建Kubernetes配置目录"><a href="#创建Kubernetes配置目录" class="headerlink" title="创建Kubernetes配置目录"></a>创建Kubernetes配置目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/kubernetes</span><br></pre></td></tr></table></figure><h3 id="创建Kubernetes通用配置文件"><a href="#创建Kubernetes通用配置文件" class="headerlink" title="创建Kubernetes通用配置文件"></a>创建Kubernetes通用配置文件</h3><p>/etc/kubernetes/config文件中，存储的是Kubernetes各组件的通用配置信息。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/kubernetes/config</span><br><span class="line"></span><br><span class="line">KUBE_LOGTOSTDERR="--logtostderr=true"</span><br><span class="line">KUBE_LOG_LEVEL="--v=0"</span><br><span class="line">KUBE_ALLOW_PRIV="--allow-privileged=false"</span><br><span class="line">KUBE_MASTER="--master=http://192.168.1.11:8080"</span><br></pre></td></tr></table></figure></p><h2 id="配置-Kubelet"><a href="#配置-Kubelet" class="headerlink" title="配置 Kubelet"></a>配置 Kubelet</h2><h3 id="1-创建kubelet的数据目录"><a href="#1-创建kubelet的数据目录" class="headerlink" title="1. 创建kubelet的数据目录"></a>1. 创建kubelet的数据目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/lib/kubelet</span><br></pre></td></tr></table></figure><h3 id="2-创建kubelete配置文件"><a href="#2-创建kubelete配置文件" class="headerlink" title="2. 创建kubelete配置文件"></a>2. 创建kubelete配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/kubernetes/kubelet</span><br><span class="line"></span><br><span class="line">KUBELET_ADDRESS="--address=127.0.0.1"</span><br><span class="line">KUBELET_HOSTNAME="--hostname-override=192.168.1.13"</span><br><span class="line">KUBELET_API_SERVER="--api-servers=http://192.168.1.11:8080"</span><br><span class="line"><span class="meta">#</span> pod infrastructure container</span><br><span class="line">KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest"</span><br><span class="line">KUBELET_ARGS="--enable-server=true --enable-debugging-handlers=true"</span><br></pre></td></tr></table></figure><h3 id="3-创建kubelet-service文件"><a href="#3-创建kubelet-service文件" class="headerlink" title="3. 创建kubelet.service文件"></a>3. 创建kubelet.service文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/kubelet.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/lib/kubelet</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/kubelet</span><br><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">        $KUBE_LOGTOSTDERR \</span><br><span class="line">        $KUBE_LOG_LEVEL \</span><br><span class="line">        $KUBELET_API_SERVER \</span><br><span class="line">        $KUBELET_ADDRESS \</span><br><span class="line">        $KUBELET_PORT \</span><br><span class="line">        $KUBELET_HOSTNAME \</span><br><span class="line">        $KUBE_ALLOW_PRIV \</span><br><span class="line">        $KUBELET_POD_INFRA_CONTAINER \</span><br><span class="line">        $KUBELET_ARGS</span><br><span class="line">Restart=on-failure</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="4-启动kubelet服务"><a href="#4-启动kubelet服务" class="headerlink" title="4. 启动kubelet服务"></a>4. 启动kubelet服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable kubelet</span><br><span class="line">sudo systemctl start kubelet</span><br><span class="line">sudo systemctl status kubelet</span><br></pre></td></tr></table></figure><h2 id="配置-kube-proxy"><a href="#配置-kube-proxy" class="headerlink" title="配置 kube-proxy"></a>配置 kube-proxy</h2><h3 id="1-创建kube-proxy配置文件"><a href="#1-创建kube-proxy配置文件" class="headerlink" title="1. 创建kube-proxy配置文件"></a>1. 创建kube-proxy配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/kubernetes/proxy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> kubernetes proxy config</span><br><span class="line"><span class="meta">#</span> default config should be adequate</span><br><span class="line"><span class="meta">#</span> Add your own!</span><br><span class="line">KUBE_PROXY_ARGS=""</span><br></pre></td></tr></table></figure><h3 id="2-创建kube-proxy-service"><a href="#2-创建kube-proxy-service" class="headerlink" title="2. 创建kube-proxy.service"></a>2. 创建kube-proxy.service</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/kube-proxy.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Proxy</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/proxy</span><br><span class="line">ExecStart=/usr/bin/kube-proxy \</span><br><span class="line">        $KUBE_LOGTOSTDERR \</span><br><span class="line">        $KUBE_LOG_LEVEL \</span><br><span class="line">        $KUBE_MASTER \</span><br><span class="line">        $KUBE_PROXY_ARGS</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="3-启动kube-proxy服务"><a href="#3-启动kube-proxy服务" class="headerlink" title="3. 启动kube-proxy服务"></a>3. 启动kube-proxy服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable kube-proxy</span><br><span class="line">sudo systemctl start kube-proxy</span><br><span class="line">sudo systemctl status kube-proxy</span><br></pre></td></tr></table></figure><h2 id="配置-Flannel"><a href="#配置-Flannel" class="headerlink" title="配置 Flannel"></a>配置 Flannel</h2><h3 id="0-下载和编译-Flannel"><a href="#0-下载和编译-Flannel" class="headerlink" title="0. 下载和编译 Flannel"></a>0. 下载和编译 Flannel</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone -b v0.5.6 https://github.com/coreos/flannel.git</span><br><span class="line">cd flannel</span><br><span class="line">./build</span><br></pre></td></tr></table></figure><p>具体的编译方法可能会不同，请参考flannel目录下的README.md文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span># Building flannel</span><br><span class="line"></span><br><span class="line">* Step 1: Make sure you have required dependencies installed on your machine. On Ubuntu, run `sudo apt-get install linux-libc-dev golang gcc`.</span><br><span class="line">On Fedora/Redhat, run `sudo yum install kernel-headers golang gcc`.</span><br><span class="line">* Step 2: Git clone the flannel repo: `git clone https://github.com/coreos/flannel.git`</span><br><span class="line">* Step 3: Run the build script: `cd flannel; ./build`</span><br></pre></td></tr></table></figure></p><p>在README.md文件中有如下一段是介绍怎么编译flannel的。其中在第一步中有介绍在Ubuntu中需要sudo apt-get install linux-libc-dev golang gcc 然后就可以./build了</p><p>编译完成后有两步</p><blockquote><ol><li>将可执行文件flanneld拷贝到/usr/bin/目录。 </li><li>创建/usr/bin/flannel目录，并将dist目录下的mk-docker-opts.sh文件拷贝到/usr/bin/flannel/中。</li></ol></blockquote><h3 id="1-创建flanneld-conf配置文件"><a href="#1-创建flanneld-conf配置文件" class="headerlink" title="1. 创建flanneld.conf配置文件"></a>1. 创建flanneld.conf配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/flanneld.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Flanneld configuration options  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> etcd url location.  Point this to the server where etcd runs</span><br><span class="line">FLANNEL_ETCD_ENDPOINTS="http://192.168.1.11:2379"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> etcd config key.  This is the configuration key that flannel queries</span><br><span class="line"><span class="meta">#</span> For address range assignment</span><br><span class="line">FLANNEL_ETCD_PREFIX="/coreos.com/network"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Any additional options that you want to pass</span><br><span class="line"><span class="meta">#</span>FLANNEL_OPTIONS=""</span><br></pre></td></tr></table></figure><p>其中，FLANNEL_ETCD_PREFIX选项是在Master中配置的etcd网络。</p><h3 id="2-创建flanneld-service文件"><a href="#2-创建flanneld-service文件" class="headerlink" title="2. 创建flanneld.service文件"></a>2. 创建flanneld.service文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/flanneld.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld</span><br><span class="line">Documentation=https://github.com/coreos/flannel</span><br><span class="line">After=network.target</span><br><span class="line">After=etcd.service</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">EnvironmentFile=/etc/default/flanneld.conf</span><br><span class="line">ExecStart=/usr/bin/flanneld \</span><br><span class="line">        -etcd-endpoints=$&#123;FLANNEL_ETCD_ENDPOINTS&#125; \</span><br><span class="line">        -etcd-prefix=$&#123;FLANNEL_ETCD_PREFIX&#125; \</span><br><span class="line">        $FLANNEL_OPTIONS</span><br><span class="line">ExecStartPost=/usr/bin/flannel/mk-docker-opts.sh -k DOCKER_OPTS -d /run/flannel/docker</span><br><span class="line">Restart=on-failure</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">RequiredBy=docker.service</span><br></pre></td></tr></table></figure><h3 id="3-启动flanneld服务"><a href="#3-启动flanneld服务" class="headerlink" title="3. 启动flanneld服务"></a>3. 启动flanneld服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl enable flanneld</span><br><span class="line">sudo systemctl start flanneld</span><br><span class="line">sudo systemctl status flanneld</span><br></pre></td></tr></table></figure><h2 id="配置-Docker"><a href="#配置-Docker" class="headerlink" title="配置 Docker"></a>配置 Docker</h2><h3 id="1-安装-Docker"><a href="#1-安装-Docker" class="headerlink" title="1. 安装 Docker"></a>1. 安装 Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install docker.io</span><br></pre></td></tr></table></figure><h3 id="2-使Flannel作用Docker网络"><a href="#2-使Flannel作用Docker网络" class="headerlink" title="2. 使Flannel作用Docker网络"></a>2. 使Flannel作用Docker网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /lib/systemd/system/docker.service.d</span><br><span class="line">sudo vim /lib/systemd/system/docker.service.d/flannel.conf</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/run/flannel/docker</span><br></pre></td></tr></table></figure><h3 id="3-重启docker服务"><a href="#3-重启docker服务" class="headerlink" title="3. 重启docker服务"></a>3. 重启docker服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>查看docker是否有了flannel的网络。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ps -ef | grep docker</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>启动各服务的统一脚本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for SERVICES in flanneld kube-proxy kubelet docker;</span><br><span class="line">do</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart $SERVICES</span><br><span class="line">sudo systemctl enable $SERVICES</span><br><span class="line">sudo systemctl status $SERVICES</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2017/08/23/Kubernetes-Node-安装与配置-Ubuntu系统/">http://www.googol.tech/2017/08/23/Kubernetes-Node-安装与配置-Ubuntu系统/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内网下已经搭建好Kubernetes集群，由两台CentOS组成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;192.168.1.11 Master&lt;br&gt;192.168.1.12 Node&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于之前搭建时操作的都是CentOS系统中
      
    
    </summary>
    
      <category term="Kubernetes" scheme="http://www.googol.tech/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub Pages+Hexo搭建博客</title>
    <link href="http://www.googol.tech/2017/08/22/GitHub%20Pages+Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.googol.tech/2017/08/22/GitHub Pages+Hexo搭建博客/</id>
    <published>2017-08-22T06:58:00.000Z</published>
    <updated>2018-02-27T09:05:41.126Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客中，主要记录我的个人站点维护过程，内容会不定时更新。</p><h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p>关于博客的主题也是挑了很久，最终选定Maupassant，主要还是喜欢它的简洁和体积小巧。<br>Maupassant最初是由Cho大神为Typecho平台设计开发的一套响应式模板，体积只有20KB，在各种尺寸的设备上表现出色。</p><p>Hexo 平台： <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">https://github.com/tufu9441/maupassant-hexo</a></p><h2 id="开启文章目录"><a href="#开启文章目录" class="headerlink" title="开启文章目录"></a>开启文章目录</h2><p>比较简单，通常Hexo会自动在文章内容的前面生成一些关于文章的基本描述信息，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 搭建博客</span><br><span class="line">date: 2017-08-22 14:58:41</span><br><span class="line">toc: true</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>只需要在这里面加入来标示开启文章目录功能，这样在博客显示的时候，会自动列出文章的目录。</p><h2 id="开启RSS订阅功能"><a href="#开启RSS订阅功能" class="headerlink" title="开启RSS订阅功能"></a>开启RSS订阅功能</h2><h3 id="1-首先安装-hexo-generator-feed"><a href="#1-首先安装-hexo-generator-feed" class="headerlink" title="1. 首先安装 hexo-generator-feed"></a>1. 首先安装 hexo-generator-feed</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h3 id="2-配置Hexo根目录-config-yml，配置RSS订阅"><a href="#2-配置Hexo根目录-config-yml，配置RSS订阅" class="headerlink" title="2. 配置Hexo根目录_config.yml，配置RSS订阅"></a>2. 配置Hexo根目录_config.yml，配置RSS订阅</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugin:</span><br><span class="line">  - hexo-generator-feed</span><br><span class="line"><span class="meta">#</span>Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br></pre></td></tr></table></figure><h2 id="使用Hexo-admin管理博客"><a href="#使用Hexo-admin管理博客" class="headerlink" title="使用Hexo-admin管理博客"></a>使用Hexo-admin管理博客</h2><h3 id="安装Hexo-admin"><a href="#安装Hexo-admin" class="headerlink" title="安装Hexo-admin"></a>安装Hexo-admin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br></pre></td></tr></table></figure><hr><ul><li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li><li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li></ul><p>本文链接：<a href="http://www.googol.tech/2017/08/22/GitHub">http://www.googol.tech/2017/08/22/GitHub</a> Pages+Hexo搭建博客/</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇博客中，主要记录我的个人站点维护过程，内容会不定时更新。&lt;/p&gt;
&lt;h2 id=&quot;博客主题&quot;&gt;&lt;a href=&quot;#博客主题&quot; class=&quot;headerlink&quot; title=&quot;博客主题&quot;&gt;&lt;/a&gt;博客主题&lt;/h2&gt;&lt;p&gt;关于博客的主题也是挑了很久，最终选定Maupas
      
    
    </summary>
    
      <category term="Hexo" scheme="http://www.googol.tech/categories/hexo/"/>
    
    
  </entry>
  
</feed>
