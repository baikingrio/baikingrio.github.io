<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>稻草人</title>
  <subtitle>大成若缺，其用不弊；大盈若冲，其用不穷。大直若屈，大巧若拙，大辩若诺。躁胜寒，静胜热，清静为天下正。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.googol.tech/"/>
  <updated>2017-11-24T08:23:17.590Z</updated>
  <id>http://www.googol.tech/</id>
  
  <author>
    <name>稻草人</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot消费BmobAPI</title>
    <link href="http://www.googol.tech/2017/11/17/SpringBoot%E6%B6%88%E8%B4%B9BmobAPI/"/>
    <id>http://www.googol.tech/2017/11/17/SpringBoot消费BmobAPI/</id>
    <published>2017-11-17T02:51:00.000Z</published>
    <updated>2017-11-24T08:23:17.590Z</updated>
    
    <content type="html"><![CDATA[<p>在大部分的情况下，使用客户端开发时调用Bmob的服务是比较常见的，比如开发Android、iOS应用程序等等。这样做能够直接省去服务端开发该做的事情，一方面降低了开发成本，另一方面也提高了客户端开发的速度，对于开发人员来说真的是一树百获啊。</p>
<p>上面说的这些大家不要认为是在打广告或是写软文，其实纯粹就是一个普通使用者对一个产品使用后的真实感受的表达，如果你非要这样认为，就怪程序员不太会用社会语言写文章吧。好了，还是少解释，咱们坐下来开始聊代码吧。</p>
<h3 id="使用到的资源"><a href="#使用到的资源" class="headerlink" title="使用到的资源"></a>使用到的资源</h3><ul>
<li><a href="https://docs.bmob.cn/data/Restful/b_developdoc/doc/index.html" target="_blank" rel="external">BmobRestfulAPI文档</a></li>
</ul>
<h3 id="SpringBoot项目"><a href="#SpringBoot项目" class="headerlink" title="SpringBoot项目"></a>SpringBoot项目</h3><p>本来是想从创建SpringBoot项目开始讲的，想想还是算了(主要是懒)，因为基本都是IDEA的步骤说明，都是截图，其实都不是这篇文章的重点。所以，这里就主要说明一下项目所使用的类库有哪些，项目是由maven构建的，pom.xml文件中dependencies部分具体配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">  &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">  &lt;/dependency&gt;</div><div class="line">  &lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</div><div class="line">  &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.2.31&lt;/version&gt;</div><div class="line">  &lt;/dependency&gt;</div><div class="line">  &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</div><div class="line">  &lt;/dependency&gt;</div><div class="line"></div><div class="line">  &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">    &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">  &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure></p>
<p>主要是spring-boot-starter-web，因为是一个web项目所以是必须的。<br>其次是fastjson，主要是用于Json数据的转换处理。<br>另一个lombok，是我比较喜欢用的一个库，基本是每个项目必备，它能让我写代码更加简洁和方便，提高效率，这里也强烈推荐给大家，具体的使用和介绍，可以自行Google了解。</p>
<img src="/2017/11/17/SpringBoot消费BmobAPI/project.png" alt="This is an project image" title="This is an project image">
<h3 id="编写Config类"><a href="#编写Config类" class="headerlink" title="编写Config类"></a>编写Config类</h3><p>工程的基本结构如上图所示，在基础的SpringBoot项目上新建了DemoConfig.java、DemoController.java两个类，接下来一一介绍，首先是DemoConfig.java类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package tech.googol.demo;</div><div class="line"></div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line">import org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class DemoConfig &#123;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public RestTemplate restTemplate()&#123;</div><div class="line">        return new RestTemplate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用@Configuration注解标识DemoConfig类是一个配置类，SpringBoot会自动处理此标识下的相关配置，其中我们使用@Bean注解在restTemplate方法上，表示将该方法返回的RestTemplate实例交由Spring上下文管理，这样就可以在需要使用RestTemplate的地方通过@Autowired注解来调用这个实例进行使用了。</p>
<h3 id="编写Controller类"><a href="#编写Controller类" class="headerlink" title="编写Controller类"></a>编写Controller类</h3><p>下面就看看怎么在DemoController类中使用RestTemplate对象来调用BmobRestfulAPI吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package tech.googol.demo;</div><div class="line"></div><div class="line">import com.alibaba.fastjson.JSONObject;</div><div class="line">import lombok.extern.slf4j.Slf4j;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.http.*;</div><div class="line">import org.springframework.web.bind.annotation.GetMapping;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line">import org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line">@Slf4j</div><div class="line">@RestController</div><div class="line">public class DemoController &#123;</div><div class="line">    @Autowired</div><div class="line">    private RestTemplate restTemplate;</div><div class="line">	//Bmob获取服务器时间的接口地址</div><div class="line">    String url = &quot;https://api.bmob.cn/1/timestamp&quot;;</div><div class="line"></div><div class="line">    @GetMapping(&quot;/time&quot;)</div><div class="line">    public ResponseEntity getServiceTime()&#123;</div><div class="line">        HttpHeaders headers = new HttpHeaders();</div><div class="line">        MediaType type = MediaType.parseMediaType(&quot;application/json; charset=UTF-8&quot;);</div><div class="line">        headers.setContentType(type);</div><div class="line">        headers.add(&quot;X-Bmob-Application-Id&quot;, &quot;4b5f22926******312c2f1e027c4071e&quot;);</div><div class="line">        headers.add(&quot;X-Bmob-REST-API-Key&quot;, &quot;4af231ed9******bcb9ab847af29a7f4&quot;);</div><div class="line">        HttpEntity&lt;Object&gt; requestEntity = new HttpEntity&lt;Object&gt;(headers);</div><div class="line">        ResponseEntity&lt;JSONObject&gt; result = restTemplate.exchange(url, HttpMethod.GET, requestEntity, JSONObject.class);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里先简单的用一个方法来调用Bmob的获取服务器时间的接口，如果能正常返回服务器时间，那么则表示调用Bmob服务接口是成功的。</p>
<p>@RestController注解是Spring4之后新加入的注解，它是@ResponseBody和@Controller的组合注解。因为只是为了做一个RestfulAPI项目，不是普通的Web项目，不需要做视图页面的跳转，所以直接使用@RestController，而不使用@Controller。</p>
<p>@Autowired注解自动装配RestTemplate对象到DemoController类中以供使用。</p>
<p>@GetMapping注解也是Spring4引入的一个组合注解，它是@RequestMapping(method = RequestMethod.GET)的缩写。@GetMapping(“/time”)表示提供一个GET请求方式的”/time”接口，该接口具体的实现在getServiceTime()方法中完成。</p>
<p>在这里我们在getServiceTime()方法中使用restTemplate对象调用了Bmob的获取服务器时间接口（<a href="https://api.bmob.cn/1/timestamp），并将接口返回的数据直接return出去,也就是作为&quot;/time&quot;接口的数据返回。" target="_blank" rel="external">https://api.bmob.cn/1/timestamp），并将接口返回的数据直接return出去,也就是作为&quot;/time&quot;接口的数据返回。</a></p>
<h3 id="RestTemplate的使用"><a href="#RestTemplate的使用" class="headerlink" title="RestTemplate的使用"></a>RestTemplate的使用</h3><p>这里重点讲一下RestTemplate请求BmobApi的部分。<br>使用的是RestTemplate对象的exchange方法来发起一次Http请求，第一个参数是请求的接口地址，第二个参数是Http请求的方式HttpMethod.GET，第三个参数是本次请求所传入的参数，这里是将接口所需的Header参数通过添加到HttpEntity对象中进行传入的，第四个参数是本次请求response返回数据的封装格式，这里是封装成JsonObject对象进行返回。</p>
<h3 id="简单封装一下"><a href="#简单封装一下" class="headerlink" title="简单封装一下"></a>简单封装一下</h3><p>上面只是为了快速检验一下能否正常请求和响应数据，所以所有的事情都在一个方法中解决了。这也是绝大多数程序员在开发过程中经常会做的事情，为了验证一个想法是否可行，会先以简单快速的方法去实践，确认可行后再展开更加详细的架构设计。<br>这里我们就一步一步来，先将getServiceTime方法的实现进行拆分一下，尽量达到代码的可重用性，因为调用任何BmobRestfulAPI时，Header中都必须传递两个参数X-Bmob-Application-Id、X-Bmob-REST-API-Key,并且需要制定Content-Type为”application/json”,所以我们可以先将这部分的代码单独拿出来在另一个方法中实现，暂且命名为generateRequestEntity方法,并重载一个无参的，以方便在请求BmobRestfulAPI时需要在body中传递参数和不需要传参的情形进行使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private HttpEntity generateRequestEntity()&#123;</div><div class="line">	return generateRequestEntity(null);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private HttpEntity generateRequestEntity(Object bodyData)&#123;</div><div class="line">  HttpHeaders headers = new HttpHeaders();</div><div class="line">  MediaType type = MediaType.parseMediaType(&quot;application/json; charset=UTF-8&quot;);</div><div class="line">  headers.setContentType(type);</div><div class="line">  headers.add(&quot;X-Bmob-Application-Id&quot;, &quot;4b5f22926******312c2f1e027c4071e&quot;);</div><div class="line">  headers.add(&quot;X-Bmob-REST-API-Key&quot;, &quot;4af231ed9******bcb9ab847af29a7f4&quot;);</div><div class="line">  HttpEntity&lt;Object&gt; requestEntity;</div><div class="line">  if(null != bodyData)&#123;</div><div class="line">  	requestEntity = new HttpEntity&lt;Object&gt;(bodyData, headers);</div><div class="line">  &#125;else&#123;</div><div class="line">  	requestEntity = new HttpEntity&lt;Object&gt;(headers);</div><div class="line">  &#125;</div><div class="line">  return requestEntity;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动SpringBoot项目，在浏览器直接访问<a href="http://localhost:8080/time" target="_blank" rel="external">http://localhost:8080/time</a> 接口，以Json格式返回Bmob服务器时间。下图为IDEA中使用REST Client访问返回的结果：</p>
<img src="/2017/11/17/SpringBoot消费BmobAPI/test.png" alt="This is an test image" title="This is an test image">
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要讲解了怎样在SpringBoot项目中访问BmobApi接口这一个知识点，通过使用RestTemplate访问获取服务器时间的接口，完成了一次简单的Http Get请求，并正确得到服务器返回的数据结果，这让我们对接下来使用BmobApi的其他接口提供了可靠的保证，最后祝大家编程愉快。</p>
<hr>
<ul>
<li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li>
<li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li>
</ul>
<p>本文链接：<a href="http://www.googol.tech/2017/11/17/SpringBoot消费BmobAPI/">http://www.googol.tech/2017/11/17/SpringBoot消费BmobAPI/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在大部分的情况下，使用客户端开发时调用Bmob的服务是比较常见的，比如开发Android、iOS应用程序等等。这样做能够直接省去服务端开发该做的事情，一方面降低了开发成本，另一方面也提高了客户端开发的速度，对于开发人员来说真的是一树百获啊。&lt;/p&gt;
&lt;p&gt;上面说的这些大家不
    
    </summary>
    
    
      <category term="Bmob" scheme="http://www.googol.tech/tags/Bmob/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7系统安装</title>
    <link href="http://www.googol.tech/2017/11/16/CentOS-7%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://www.googol.tech/2017/11/16/CentOS-7系统安装/</id>
    <published>2017-11-16T10:18:00.000Z</published>
    <updated>2017-11-16T10:24:26.392Z</updated>
    
    <content type="html"><![CDATA[<h3 id="制作U盘镜像"><a href="#制作U盘镜像" class="headerlink" title="制作U盘镜像"></a>制作U盘镜像</h3><h4 id="1-下载cengos-iso镜像文件"><a href="#1-下载cengos-iso镜像文件" class="headerlink" title="1.下载cengos iso镜像文件"></a>1.下载cengos iso镜像文件</h4><p>使用阿里提供的国内下载地址<br><a href="http://mirrors.aliyun.com/centos/" target="_blank" rel="external">http://mirrors.aliyun.com/centos/</a><br>这里选择的是如下版本<br><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso" target="_blank" rel="external">http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso</a> </p>
<h4 id="2-使用UltraISO工具刻录到U盘"><a href="#2-使用UltraISO工具刻录到U盘" class="headerlink" title="2.使用UltraISO工具刻录到U盘"></a>2.使用UltraISO工具刻录到U盘</h4><p>U盘大小要求8G以上<br>工具的使用方法参考百度经验：<a href="http://jingyan.baidu.com/article/363872ec8b4f6a6e4ba16f2b.html" target="_blank" rel="external">http://jingyan.baidu.com/article/363872ec8b4f6a6e4ba16f2b.html</a></p>
<h3 id="设置Boot从U盘启动"><a href="#设置Boot从U盘启动" class="headerlink" title="设置Boot从U盘启动"></a>设置Boot从U盘启动</h3><p>启动是进入Boot模式选择U盘启动<br>然后参照如下几个教程进行系统安装：<br><a href="http://linux.it.net.cn/CentOS/fast/2016/1229/25698.html" target="_blank" rel="external">http://linux.it.net.cn/CentOS/fast/2016/1229/25698.html</a><br><a href="https://www.xiariboke.com/computer/3625.html" target="_blank" rel="external">https://www.xiariboke.com/computer/3625.html</a><br><a href="https://micorochio.github.io/2017/01/14/add-centos-to-win10/" target="_blank" rel="external">https://micorochio.github.io/2017/01/14/add-centos-to-win10/</a></p>
<h3 id="没有ifconfig命令的解决办法"><a href="#没有ifconfig命令的解决办法" class="headerlink" title="没有ifconfig命令的解决办法"></a>没有ifconfig命令的解决办法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum search ifconfig</div><div class="line">yum install net-tools.x86_64</div></pre></td></tr></table></figure>
<h3 id="可能遇到的一些问题"><a href="#可能遇到的一些问题" class="headerlink" title="可能遇到的一些问题"></a>可能遇到的一些问题</h3><ul>
<li>使用yum 命令是遇到Could not retrieve mirrorlist <a href="http://mirrorlist.centos.org/相关错误" target="_blank" rel="external">http://mirrorlist.centos.org/相关错误</a></li>
</ul>
<p>解决办法：<br>修改/etc/sysconfig/network-scripts/ifcfg-xxx文件中的如下两项内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ONBOOT=yes</div><div class="line">MM_CONTROLLED=no</div></pre></td></tr></table></figure></p>
<p>修改完成后台重启</p>
<h3 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h3><p>1.修改网卡配置<br>vi /etc/sysconfig/network-scripts/ifcfg-xxx xxx是具体的网卡名称，不同的机器安装os后的可能不一样，按实际情况修改成自己的网卡名称<br>将ifcfg-xxx的内容修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">TYPE=Ethernet</div><div class="line">NAME=enp2s0</div><div class="line">DEVICE=enp2s0</div><div class="line">BOOTPROTO=static</div><div class="line">BROADCAST=192.168.1.255</div><div class="line">UUID=b1800d7d-b58e-4fcb-a109-1b12068227e3</div><div class="line">IPADDR=192.168.1.11</div><div class="line">IPV6INIT=no</div><div class="line">IPV6_AUTOCONF=no</div><div class="line">NETMASK=255.255.255.0</div><div class="line">NETWORK=192.168.1.1</div><div class="line">ONBOOT=yes</div></pre></td></tr></table></figure></p>
<p>每项解释如下：<br>DEVICE=eth0 #描述网卡对应的设备别名<br>HWADDR=00:07:E9:05:E8:B4 #对应的网卡网卡地址,即mac地址<br>TYPE=Ethernet#表示网络类型是以太网<br>UUID：网卡的UUID（文件里可以没有）<br>ONBOOT=yes#系统启动时自动加载eth0<br>NM_CONTROLLED=yes#设备是否被NetworkManager管理<br>BOOTPROTO=static#通过不同协议设置网卡获得ip地址的方式,–静态static –bootp –dhcp<br>IPADDR=192.168.1.11#设置网卡IP地址<br>NETMASK=255.255.255.0#设置网卡掩码地址<br>NETWORK=192.168.1.1#设置网卡对应的网络地址<br>BROADCAST=192.168.1.255#设置网卡对应网络的广播地址</p>
<p>2.修改网关配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/network</div></pre></td></tr></table></figure></p>
<p>添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GATEWAY=192.168.1.1</div></pre></td></tr></table></figure></p>
<p>3.修改DNS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/resolv.conf</div></pre></td></tr></table></figure></p>
<p>添加两个dns<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver 8.8.8.8</div><div class="line">nameserver 114.114.114.114</div></pre></td></tr></table></figure></p>
<p>4.重启网络服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service network restart</div></pre></td></tr></table></figure></p>
<p>5.在另一台机器上验证是否可以ping通<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping 192.168.1.11</div></pre></td></tr></table></figure></p>
<h3 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum -y install wget </div><div class="line">yum -y install setup </div><div class="line">yum -y install perl</div></pre></td></tr></table></figure>
<p>如果出现GCC..相关错误，则需要先安装GCC</p>
<p>将gcc和make一起装好<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc make</div></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1.查看端口占用情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -ntlp</div></pre></td></tr></table></figure></p>
<h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld.service #停止firewall</div><div class="line"></div><div class="line">systemctl disable firewalld.service #禁止firewall开机启动</div></pre></td></tr></table></figure>
<p>重启后生效</p>
<h4 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h4><ul>
<li><p>永久有效<br>修改 /etc/selinux/config 文件中的 SELINUX=”” 为 disabled ，然后重启。</p>
</li>
<li><p>即时生效</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setenforce 0</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li>
<li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li>
</ul>
<p>本文链接：<a href="http://www.googol.tech/2017/11/16/CentOS-7系统安装/">http://www.googol.tech/2017/11/16/CentOS-7系统安装/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;制作U盘镜像&quot;&gt;&lt;a href=&quot;#制作U盘镜像&quot; class=&quot;headerlink&quot; title=&quot;制作U盘镜像&quot;&gt;&lt;/a&gt;制作U盘镜像&lt;/h3&gt;&lt;h4 id=&quot;1-下载cengos-iso镜像文件&quot;&gt;&lt;a href=&quot;#1-下载cengos-iso镜像文件&quot;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://www.googol.tech/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装Jenkins</title>
    <link href="http://www.googol.tech/2017/11/16/CentOS-7%E5%AE%89%E8%A3%85Jenkins/"/>
    <id>http://www.googol.tech/2017/11/16/CentOS-7安装Jenkins/</id>
    <published>2017-11-16T09:52:00.000Z</published>
    <updated>2017-11-16T10:04:47.824Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看Jenkinsg最新稳定版"><a href="#查看Jenkinsg最新稳定版" class="headerlink" title="查看Jenkinsg最新稳定版"></a>查看Jenkinsg最新稳定版</h3><p><a href="https://pkg.jenkins.io/redhat-stable/" target="_blank" rel="external">https://pkg.jenkins.io/redhat-stable/</a></p>
<h3 id="yum-方式安装"><a href="#yum-方式安装" class="headerlink" title="yum 方式安装"></a>yum 方式安装</h3><p>1.下载依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</div></pre></td></tr></table></figure></p>
<p>2.导入秘钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</div></pre></td></tr></table></figure></p>
<p>3.安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install jenkins</div></pre></td></tr></table></figure></p>
<h3 id="查看jenkins安装路径"><a href="#查看jenkins安装路径" class="headerlink" title="查看jenkins安装路径"></a>查看jenkins安装路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">rpm -ql jenkins</div><div class="line"></div><div class="line">/etc/init.d/jenkins</div><div class="line">/etc/logrotate.d/jenkins</div><div class="line">/etc/sysconfig/jenkins</div><div class="line">/usr/lib/jenkins</div><div class="line">/usr/lib/jenkins/jenkins.war</div><div class="line">/usr/sbin/rcjenkins</div><div class="line">/var/cache/jenkins</div><div class="line">/var/lib/jenkins</div><div class="line">/var/log/jenkins</div></pre></td></tr></table></figure>
<p>/usr/lib/jenkins/：jenkins安装目录，war包会放在这里。<br>/etc/sysconfig/jenkins：jenkins配置文件，“端口”，“JENKINS_HOME”等都可以在这里配置。<br>/var/lib/jenkins/：默认的JENKINS_HOME。<br>/var/log/jenkins/jenkins.log：jenkins日志文件。</p>
<h3 id="启动-停止"><a href="#启动-停止" class="headerlink" title="启动/停止"></a>启动/停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service jenkins start/stop/restart</div><div class="line">sudo chkconfig jenkins on</div></pre></td></tr></table></figure>
<p>查看jenkins状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status jenkins</div></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>将jenkins用户添加进docker用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo usermod -aG docker jenkins</div><div class="line">sudo systemctl restart jenkins</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li>
<li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li>
</ul>
<p>本文链接：<a href="http://www.googol.tech/2017/11/16/CentOS-7安装Jenkins/">http://www.googol.tech/2017/11/16/CentOS-7安装Jenkins/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;查看Jenkinsg最新稳定版&quot;&gt;&lt;a href=&quot;#查看Jenkinsg最新稳定版&quot; class=&quot;headerlink&quot; title=&quot;查看Jenkinsg最新稳定版&quot;&gt;&lt;/a&gt;查看Jenkinsg最新稳定版&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://p
    
    </summary>
    
      <category term="Jenkins" scheme="http://www.googol.tech/categories/Jenkins/"/>
    
    
      <category term="CentOS" scheme="http://www.googol.tech/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装Docker</title>
    <link href="http://www.googol.tech/2017/11/16/CentOS-7%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://www.googol.tech/2017/11/16/CentOS-7安装Docker/</id>
    <published>2017-11-16T09:49:00.000Z</published>
    <updated>2017-11-16T10:03:53.174Z</updated>
    
    <content type="html"><![CDATA[<h3 id="检查内核版本"><a href="#检查内核版本" class="headerlink" title="检查内核版本"></a>检查内核版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uname -r</div></pre></td></tr></table></figure>
<p><strong>docker需要的内核版本是3.10</strong></p>
<h3 id="更新yum包"><a href="#更新yum包" class="headerlink" title="更新yum包"></a>更新yum包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum update</div></pre></td></tr></table></figure>
<h3 id="rpm-方式安装"><a href="#rpm-方式安装" class="headerlink" title="rpm 方式安装"></a>rpm 方式安装</h3><h4 id="下载rpm包"><a href="#下载rpm包" class="headerlink" title="下载rpm包"></a>下载rpm包</h4><p>到<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/下载对应的.rpm文件" target="_blank" rel="external">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/下载对应的.rpm文件</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -O -sSL https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.06.0.ce-1.el7.centos.x86_64.rpm</div></pre></td></tr></table></figure></p>
<h4 id="安装rpm包"><a href="#安装rpm包" class="headerlink" title="安装rpm包"></a>安装rpm包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum localinstall --nogpgcheck docker-ce-17.06.0.ce-1.el7.centos.x86_64.rpm</div></pre></td></tr></table></figure>
<h3 id="启动Docker服务"><a href="#启动Docker服务" class="headerlink" title="启动Docker服务"></a>启动Docker服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 设置开机启动</div><div class="line">sudo systemctl enable docker</div><div class="line">// 启动docker</div><div class="line">sudo systemctl start docker</div></pre></td></tr></table></figure>
<h3 id="验证Docker"><a href="#验证Docker" class="headerlink" title="验证Docker"></a>验证Docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run hell-world</div></pre></td></tr></table></figure>
<h3 id="使用Docker加速器"><a href="#使用Docker加速器" class="headerlink" title="使用Docker加速器"></a>使用Docker加速器</h3><p>因为国内的原因，可以使用加速器，这样在下载镜像时会比较快。<br>针对Docker客户端版本大于1.10的用户，可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /etc/docker</div><div class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</div><div class="line">&#123;</div><div class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxxxxxx.mirror.aliyuncs.com&quot;]</div><div class="line">&#125;</div><div class="line">EOF</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure></p>
<p>以上是使用的阿里云提供的加速器，给每个用户提供的地址都不一样，可更改为自己的。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>有时centos 中的docker启动会出错，和存储相关的错误，可以在/etc/docker/daemon.json文件中添加”storage-driver”: “devicemapper”，然后重启即可。</p>
<h3 id="Docker清理"><a href="#Docker清理" class="headerlink" title="Docker清理"></a>Docker清理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 杀死所有正在运行的容器</div><div class="line">docker kill $(docker ps -a -q)</div><div class="line"># 删除所有已经停止的容器</div><div class="line">docker rm $(docker ps -a -q)</div><div class="line"># 删除所有未打 dangling 标签的镜像</div><div class="line">docker rmi $(docker images -q -f dangling=true)</div><div class="line"># 删除所有镜像</div><div class="line">docker rmi $(docker images -q)</div></pre></td></tr></table></figure>
<h3 id="卸载旧的docker和依赖包"><a href="#卸载旧的docker和依赖包" class="headerlink" title="卸载旧的docker和依赖包"></a>卸载旧的docker和依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo yum remove docker \</div><div class="line">	  docker-common \</div><div class="line">	  container-selinux \</div><div class="line">	  docker-selinux \</div><div class="line">	  docker-engine</div></pre></td></tr></table></figure>
<h3 id="卸载Docker-CE"><a href="#卸载Docker-CE" class="headerlink" title="卸载Docker CE"></a>卸载Docker CE</h3><p>1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum remove docker-ce</div></pre></td></tr></table></figure></p>
<p>Note：镜像，容器，卷和配置文件不是被自动移除的，需要手动删除</p>
<p>2.删除所有的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /var/lib/docker</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li>
<li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li>
</ul>
<p>本文链接：<a href="http://www.googol.tech/2017/11/16/CentOS-7安装Docker/">http://www.googol.tech/2017/11/16/CentOS-7安装Docker/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;检查内核版本&quot;&gt;&lt;a href=&quot;#检查内核版本&quot; class=&quot;headerlink&quot; title=&quot;检查内核版本&quot;&gt;&lt;/a&gt;检查内核版本&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="Docker" scheme="http://www.googol.tech/categories/Docker/"/>
    
    
      <category term="CentOS" scheme="http://www.googol.tech/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装JDK</title>
    <link href="http://www.googol.tech/2017/11/16/CentOS-7%E5%AE%89%E8%A3%85JDK/"/>
    <id>http://www.googol.tech/2017/11/16/CentOS-7安装JDK/</id>
    <published>2017-11-16T09:46:00.000Z</published>
    <updated>2017-11-16T10:00:12.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="yum-方式安装JDK"><a href="#yum-方式安装JDK" class="headerlink" title="yum 方式安装JDK"></a>yum 方式安装JDK</h3><h4 id="1-首先查看JDK软件包列表"><a href="#1-首先查看JDK软件包列表" class="headerlink" title="1.首先查看JDK软件包列表"></a>1.首先查看JDK软件包列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">yum search java | grep -i --color JDK</div><div class="line"></div><div class="line">ldapjdk-javadoc.noarch : Javadoc for ldapjdk</div><div class="line">icedtea-web.x86_64 : Additional Java components for OpenJDK - Java browser</div><div class="line">java-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment</div><div class="line">java-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos</div><div class="line">java-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment</div><div class="line">java-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation</div><div class="line">java-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle</div><div class="line">java-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment</div><div class="line">java-1.7.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connector</div><div class="line">java-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos</div><div class="line">java-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment</div><div class="line">java-1.7.0-openjdk-headless.x86_64 : The OpenJDK runtime environment without</div><div class="line">java-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation</div><div class="line">java-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle</div><div class="line">java-1.8.0-openjdk.i686 : OpenJDK Runtime Environment</div><div class="line">java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment</div><div class="line">java-1.8.0-openjdk-accessibility.i686 : OpenJDK accessibility connector</div><div class="line">java-1.8.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connector</div><div class="line">java-1.8.0-openjdk-accessibility-debug.i686 : OpenJDK accessibility connector</div><div class="line">java-1.8.0-openjdk-accessibility-debug.x86_64 : OpenJDK accessibility connector</div><div class="line">java-1.8.0-openjdk-debug.i686 : OpenJDK Runtime Environment with full debug on</div><div class="line">java-1.8.0-openjdk-debug.x86_64 : OpenJDK Runtime Environment with full debug on</div><div class="line">java-1.8.0-openjdk-demo.i686 : OpenJDK Demos</div><div class="line">java-1.8.0-openjdk-demo.x86_64 : OpenJDK Demos</div><div class="line">java-1.8.0-openjdk-demo-debug.i686 : OpenJDK Demos with full debug on</div><div class="line">java-1.8.0-openjdk-demo-debug.x86_64 : OpenJDK Demos with full debug on</div><div class="line">java-1.8.0-openjdk-devel.i686 : OpenJDK Development Environment</div><div class="line">java-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environment</div><div class="line">java-1.8.0-openjdk-devel-debug.i686 : OpenJDK Development Environment with full</div><div class="line">java-1.8.0-openjdk-devel-debug.x86_64 : OpenJDK Development Environment with</div><div class="line">java-1.8.0-openjdk-headless.i686 : OpenJDK Runtime Environment</div><div class="line">java-1.8.0-openjdk-headless.x86_64 : OpenJDK Runtime Environment</div><div class="line">java-1.8.0-openjdk-headless-debug.i686 : OpenJDK Runtime Environment with full</div><div class="line">java-1.8.0-openjdk-headless-debug.x86_64 : OpenJDK Runtime Environment with full</div><div class="line">java-1.8.0-openjdk-javadoc.noarch : OpenJDK API Documentation</div><div class="line">java-1.8.0-openjdk-javadoc-debug.noarch : OpenJDK API Documentation for packages</div><div class="line">java-1.8.0-openjdk-javadoc-zip.noarch : OpenJDK API Documentation compressed in</div><div class="line">java-1.8.0-openjdk-javadoc-zip-debug.noarch : OpenJDK API Documentation</div><div class="line">java-1.8.0-openjdk-src.i686 : OpenJDK Source Bundle</div><div class="line">java-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundle</div><div class="line">java-1.8.0-openjdk-src-debug.i686 : OpenJDK Source Bundle for packages with</div><div class="line">java-1.8.0-openjdk-src-debug.x86_64 : OpenJDK Source Bundle for packages with</div><div class="line">ldapjdk.noarch : The Mozilla LDAP Java SDK</div></pre></td></tr></table></figure>
<p>然后选择需要的版本安装，这里我选择java-1.8.0-openjdk.x86_64进行安装</p>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install java-1.8.0-openjdk.x86_64</div><div class="line">yum install java-1.8.0-openjdk-devel.x86_64</div></pre></td></tr></table></figure>
<h4 id="3-验证验证是否成功"><a href="#3-验证验证是否成功" class="headerlink" title="3.验证验证是否成功"></a>3.验证验证是否成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java -version</div><div class="line"></div><div class="line">openjdk version &quot;1.8.0_144&quot;</div><div class="line">OpenJDK Runtime Environment (build 1.8.0_144-b01)</div><div class="line">OpenJDK 64-Bit Server VM (build 25.144-b01, mixed mode)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li>
<li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li>
</ul>
<p>本文链接：<a href="http://www.googol.tech/2017/11/16/CentOS-7安装JDK/">http://www.googol.tech/2017/11/16/CentOS-7安装JDK/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;yum-方式安装JDK&quot;&gt;&lt;a href=&quot;#yum-方式安装JDK&quot; class=&quot;headerlink&quot; title=&quot;yum 方式安装JDK&quot;&gt;&lt;/a&gt;yum 方式安装JDK&lt;/h3&gt;&lt;h4 id=&quot;1-首先查看JDK软件包列表&quot;&gt;&lt;a href=&quot;#1-首
    
    </summary>
    
    
      <category term="CentOS" scheme="http://www.googol.tech/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建本地镜像仓库</title>
    <link href="http://www.googol.tech/2017/11/16/Docker%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>http://www.googol.tech/2017/11/16/Docker搭建本地镜像仓库/</id>
    <published>2017-11-16T08:44:00.000Z</published>
    <updated>2017-11-16T10:02:03.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载registry镜像"><a href="#下载registry镜像" class="headerlink" title="下载registry镜像"></a>下载registry镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull registry</div></pre></td></tr></table></figure>
<h3 id="运行registry容器"><a href="#运行registry容器" class="headerlink" title="运行registry容器"></a>运行registry容器</h3><p>因为是用的容器来做本地镜像仓库的，默认情况下存储的内容是在容器内部的，当容器被删除时，则存放在容器中的镜像也会丢失。<br>所以一般情况下载运行registry容器时，可以使用一个本机目录挂载到容器的/var/lib/registry目录，这样当registry容器删除时，<br>上传到本地镜像仓库的镜像文件就不会随着容器的删除而丢失了。<br>这里我使用的是本机目录/opt/data/bmob-dockerhub<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 5000:5000 -v /opt/data/bmob-dockerhub:/var/lib/registry --name bmob-dockerhub registry</div></pre></td></tr></table></figure></p>
<h3 id="测试上传镜像到本地仓库中"><a href="#测试上传镜像到本地仓库中" class="headerlink" title="测试上传镜像到本地仓库中"></a>测试上传镜像到本地仓库中</h3><p>1.首先用一个小镜像来做测试，这里是下载的busybox镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull busybox</div></pre></td></tr></table></figure></p>
<p>2.然后打个tag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag busybox 192.168.1.13:5000/busybox</div></pre></td></tr></table></figure></p>
<p>这里是用192.168.1.13这台机做本地仓库的</p>
<p>3.push到仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push 192.168.1.13:5000/busybox</div></pre></td></tr></table></figure></p>
<p>可能遇到的错误：<br>The push refers to a repository [192.168.1.13:5000/busybox]<br>Get <a href="https://192.168.1.13:5000/v2/" target="_blank" rel="external">https://192.168.1.13:5000/v2/</a>: http: server gave HTTP response to HTTPS client</p>
<p>解决方法：<br>在/etc/docker/daemon.json文件中添加下面一条数据<br>{ “insecure-registries”: [“192.168.1.13:5000”] }<br>然后重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div><div class="line">systemctl restart docker</div></pre></td></tr></table></figure></p>
<p>将registry容器运行起来，再push就可以成功了</p>
<h3 id="测试从本地仓库中拉取镜像"><a href="#测试从本地仓库中拉取镜像" class="headerlink" title="测试从本地仓库中拉取镜像"></a>测试从本地仓库中拉取镜像</h3><p>1.先将本机中的busybox镜像和192.168.1.13:5000/busybox镜像删除</p>
<p>2.拉取镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull 192.168.1.13:5000/busybox</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li>
<li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li>
</ul>
<p>本文链接：<a href="http://www.googol.tech/2017/11/16/Docker搭建本地镜像仓库/">http://www.googol.tech/2017/11/16/Docker搭建本地镜像仓库/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载registry镜像&quot;&gt;&lt;a href=&quot;#下载registry镜像&quot; class=&quot;headerlink&quot; title=&quot;下载registry镜像&quot;&gt;&lt;/a&gt;下载registry镜像&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.googol.tech/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.googol.tech/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Node 安装与配置(Ubuntu系统)</title>
    <link href="http://www.googol.tech/2017/08/23/Kubernetes-Node-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE-Ubuntu%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.googol.tech/2017/08/23/Kubernetes-Node-安装与配置-Ubuntu系统/</id>
    <published>2017-08-23T09:44:08.000Z</published>
    <updated>2017-08-24T08:05:58.129Z</updated>
    
    <content type="html"><![CDATA[<p>内网下已经搭建好Kubernetes集群，由两台CentOS组成。</p>
<blockquote>
<p>192.168.1.11 Master<br>192.168.1.12 Node</p>
</blockquote>
<p>由于之前搭建时操作的都是CentOS系统中的安装与配置，与Ubuntu下还是有些区别。这里主要记录下将Ubuntu系统的主机加入到Kubernetes集群中的操作步骤。</p>
<blockquote>
<p>待操作的主机基本情况</p>
<p>Ubuntu 版本: 16.04<br>IP: 192.168.1.13</p>
</blockquote>
<p>因为在kubernetes节点上需要运行kubelet、kube-proxy、docker和flannel服务并进行相关配置才能正常加入到集群中，所以先一个服务一个服务来安装。</p>
<p>kubelet和kube-proxy两个都属于Kubernetes源码相关的，所先下载下来。<br>Client二进制下载：<a href="https://dl.k8s.io/v1.5.5/kubernetes-client-linux-amd64.tar.gz" target="_blank" rel="external">https://dl.k8s.io/v1.5.5/kubernetes-client-linux-amd64.tar.gz</a><br>Server二进制下载：<a href="https://dl.k8s.io/v1.5.5/kubernetes-server-linux-amd64.tar.gz" target="_blank" rel="external">https://dl.k8s.io/v1.5.5/kubernetes-server-linux-amd64.tar.gz</a> </p>
<p>实际上只需要用到kubernetes-server-linux-amd64，kubernetes-client-linux-amd64中只有一个kubectl,这是master上需要用的，这里只是负责node节点的部署所以用不上。<br>解压kubernetes-server-linux-amd64.tar.gz，将/server/bin/目录下的kubelet、kube-proxy拷贝到/usr/bin/目录下。</p>
<h2 id="通用配置"><a href="#通用配置" class="headerlink" title="通用配置"></a>通用配置</h2><p>这部分内容是Master与Node上通用的配置操作</p>
<h3 id="创建Kubernetes配置目录"><a href="#创建Kubernetes配置目录" class="headerlink" title="创建Kubernetes配置目录"></a>创建Kubernetes配置目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /etc/kubernetes</div></pre></td></tr></table></figure>
<h3 id="创建Kubernetes通用配置文件"><a href="#创建Kubernetes通用配置文件" class="headerlink" title="创建Kubernetes通用配置文件"></a>创建Kubernetes通用配置文件</h3><p>/etc/kubernetes/config文件中，存储的是Kubernetes各组件的通用配置信息。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/kubernetes/config</div><div class="line"></div><div class="line">KUBE_LOGTOSTDERR="--logtostderr=true"</div><div class="line">KUBE_LOG_LEVEL="--v=0"</div><div class="line">KUBE_ALLOW_PRIV="--allow-privileged=false"</div><div class="line">KUBE_MASTER="--master=http://192.168.1.11:8080"</div></pre></td></tr></table></figure></p>
<h2 id="配置-Kubelet"><a href="#配置-Kubelet" class="headerlink" title="配置 Kubelet"></a>配置 Kubelet</h2><h3 id="1-创建kubelet的数据目录"><a href="#1-创建kubelet的数据目录" class="headerlink" title="1. 创建kubelet的数据目录"></a>1. 创建kubelet的数据目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /var/lib/kubelet</div></pre></td></tr></table></figure>
<h3 id="2-创建kubelete配置文件"><a href="#2-创建kubelete配置文件" class="headerlink" title="2. 创建kubelete配置文件"></a>2. 创建kubelete配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/kubernetes/kubelet</div><div class="line"></div><div class="line">KUBELET_ADDRESS="--address=127.0.0.1"</div><div class="line">KUBELET_HOSTNAME="--hostname-override=192.168.1.13"</div><div class="line">KUBELET_API_SERVER="--api-servers=http://192.168.1.11:8080"</div><div class="line"><span class="meta">#</span> pod infrastructure container</div><div class="line">KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest"</div><div class="line">KUBELET_ARGS="--enable-server=true --enable-debugging-handlers=true"</div></pre></td></tr></table></figure>
<h3 id="3-创建kubelet-service文件"><a href="#3-创建kubelet-service文件" class="headerlink" title="3. 创建kubelet.service文件"></a>3. 创建kubelet.service文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">sudo vim /lib/systemd/system/kubelet.service</div><div class="line"></div><div class="line">[Unit]</div><div class="line">Description=Kubernetes Kubelet</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line">After=docker.service</div><div class="line">Requires=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">WorkingDirectory=/var/lib/kubelet</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/kubelet</div><div class="line">ExecStart=/usr/bin/kubelet \</div><div class="line">        $KUBE_LOGTOSTDERR \</div><div class="line">        $KUBE_LOG_LEVEL \</div><div class="line">        $KUBELET_API_SERVER \</div><div class="line">        $KUBELET_ADDRESS \</div><div class="line">        $KUBELET_PORT \</div><div class="line">        $KUBELET_HOSTNAME \</div><div class="line">        $KUBE_ALLOW_PRIV \</div><div class="line">        $KUBELET_POD_INFRA_CONTAINER \</div><div class="line">        $KUBELET_ARGS</div><div class="line">Restart=on-failure</div><div class="line">KillMode=process</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<h3 id="4-启动kubelet服务"><a href="#4-启动kubelet服务" class="headerlink" title="4. 启动kubelet服务"></a>4. 启动kubelet服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl enable kubelet</div><div class="line">sudo systemctl start kubelet</div><div class="line">sudo systemctl status kubelet</div></pre></td></tr></table></figure>
<h2 id="配置-kube-proxy"><a href="#配置-kube-proxy" class="headerlink" title="配置 kube-proxy"></a>配置 kube-proxy</h2><h3 id="1-创建kube-proxy配置文件"><a href="#1-创建kube-proxy配置文件" class="headerlink" title="1. 创建kube-proxy配置文件"></a>1. 创建kube-proxy配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/kubernetes/proxy</div><div class="line"></div><div class="line"><span class="meta">#</span> kubernetes proxy config</div><div class="line"><span class="meta">#</span> default config should be adequate</div><div class="line"><span class="meta">#</span> Add your own!</div><div class="line">KUBE_PROXY_ARGS=""</div></pre></td></tr></table></figure>
<h3 id="2-创建kube-proxy-service"><a href="#2-创建kube-proxy-service" class="headerlink" title="2. 创建kube-proxy.service"></a>2. 创建kube-proxy.service</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">sudo vim /lib/systemd/system/kube-proxy.service</div><div class="line"></div><div class="line">[Unit]</div><div class="line">Description=Kubernetes Proxy</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line">After=network.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/proxy</div><div class="line">ExecStart=/usr/bin/kube-proxy \</div><div class="line">        $KUBE_LOGTOSTDERR \</div><div class="line">        $KUBE_LOG_LEVEL \</div><div class="line">        $KUBE_MASTER \</div><div class="line">        $KUBE_PROXY_ARGS</div><div class="line">Restart=on-failure</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<h3 id="3-启动kube-proxy服务"><a href="#3-启动kube-proxy服务" class="headerlink" title="3. 启动kube-proxy服务"></a>3. 启动kube-proxy服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl enable kube-proxy</div><div class="line">sudo systemctl start kube-proxy</div><div class="line">sudo systemctl status kube-proxy</div></pre></td></tr></table></figure>
<h2 id="配置-Flannel"><a href="#配置-Flannel" class="headerlink" title="配置 Flannel"></a>配置 Flannel</h2><h3 id="0-下载和编译-Flannel"><a href="#0-下载和编译-Flannel" class="headerlink" title="0. 下载和编译 Flannel"></a>0. 下载和编译 Flannel</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone -b v0.5.6 https://github.com/coreos/flannel.git</div><div class="line">cd flannel</div><div class="line">./build</div></pre></td></tr></table></figure>
<p>具体的编译方法可能会不同，请参考flannel目录下的README.md文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span># Building flannel</div><div class="line"></div><div class="line">* Step 1: Make sure you have required dependencies installed on your machine. On Ubuntu, run `sudo apt-get install linux-libc-dev golang gcc`.</div><div class="line">On Fedora/Redhat, run `sudo yum install kernel-headers golang gcc`.</div><div class="line">* Step 2: Git clone the flannel repo: `git clone https://github.com/coreos/flannel.git`</div><div class="line">* Step 3: Run the build script: `cd flannel; ./build`</div></pre></td></tr></table></figure></p>
<p>在README.md文件中有如下一段是介绍怎么编译flannel的。其中在第一步中有介绍在Ubuntu中需要sudo apt-get install linux-libc-dev golang gcc 然后就可以./build了</p>
<p>编译完成后有两步</p>
<blockquote>
<ol>
<li>将可执行文件flanneld拷贝到/usr/bin/目录。 </li>
<li>创建/usr/bin/flannel目录，并将dist目录下的mk-docker-opts.sh文件拷贝到/usr/bin/flannel/中。</li>
</ol>
</blockquote>
<h3 id="1-创建flanneld-conf配置文件"><a href="#1-创建flanneld-conf配置文件" class="headerlink" title="1. 创建flanneld.conf配置文件"></a>1. 创建flanneld.conf配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/default/flanneld.conf</div><div class="line"></div><div class="line"><span class="meta">#</span> Flanneld configuration options  </div><div class="line"></div><div class="line"><span class="meta">#</span> etcd url location.  Point this to the server where etcd runs</div><div class="line">FLANNEL_ETCD_ENDPOINTS="http://192.168.1.11:2379"</div><div class="line"></div><div class="line"><span class="meta">#</span> etcd config key.  This is the configuration key that flannel queries</div><div class="line"><span class="meta">#</span> For address range assignment</div><div class="line">FLANNEL_ETCD_PREFIX="/coreos.com/network"</div><div class="line"></div><div class="line"><span class="meta">#</span> Any additional options that you want to pass</div><div class="line"><span class="meta">#</span>FLANNEL_OPTIONS=""</div></pre></td></tr></table></figure>
<p>其中，FLANNEL_ETCD_PREFIX选项是在Master中配置的etcd网络。</p>
<h3 id="2-创建flanneld-service文件"><a href="#2-创建flanneld-service文件" class="headerlink" title="2. 创建flanneld.service文件"></a>2. 创建flanneld.service文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">sudo vim /lib/systemd/system/flanneld.service</div><div class="line"></div><div class="line">[Unit]</div><div class="line">Description=Flanneld</div><div class="line">Documentation=https://github.com/coreos/flannel</div><div class="line">After=network.target</div><div class="line">After=etcd.service</div><div class="line">Before=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">User=root</div><div class="line">EnvironmentFile=/etc/default/flanneld.conf</div><div class="line">ExecStart=/usr/bin/flanneld \</div><div class="line">        -etcd-endpoints=$&#123;FLANNEL_ETCD_ENDPOINTS&#125; \</div><div class="line">        -etcd-prefix=$&#123;FLANNEL_ETCD_PREFIX&#125; \</div><div class="line">        $FLANNEL_OPTIONS</div><div class="line">ExecStartPost=/usr/bin/flannel/mk-docker-opts.sh -k DOCKER_OPTS -d /run/flannel/docker</div><div class="line">Restart=on-failure</div><div class="line">Type=notify</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line">RequiredBy=docker.service</div></pre></td></tr></table></figure>
<h3 id="3-启动flanneld服务"><a href="#3-启动flanneld服务" class="headerlink" title="3. 启动flanneld服务"></a>3. 启动flanneld服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo systemctl daemon-reload </div><div class="line">sudo systemctl enable flanneld</div><div class="line">sudo systemctl start flanneld</div><div class="line">sudo systemctl status flanneld</div></pre></td></tr></table></figure>
<h2 id="配置-Docker"><a href="#配置-Docker" class="headerlink" title="配置 Docker"></a>配置 Docker</h2><h3 id="1-安装-Docker"><a href="#1-安装-Docker" class="headerlink" title="1. 安装 Docker"></a>1. 安装 Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt -y install docker.io</div></pre></td></tr></table></figure>
<h3 id="2-使Flannel作用Docker网络"><a href="#2-使Flannel作用Docker网络" class="headerlink" title="2. 使Flannel作用Docker网络"></a>2. 使Flannel作用Docker网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /lib/systemd/system/docker.service.d</div><div class="line">sudo vim /lib/systemd/system/docker.service.d/flannel.conf</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/run/flannel/docker</div></pre></td></tr></table></figure>
<h3 id="3-重启docker服务"><a href="#3-重启docker服务" class="headerlink" title="3. 重启docker服务"></a>3. 重启docker服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure>
<p>查看docker是否有了flannel的网络。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ps -ef | grep docker</div></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>启动各服务的统一脚本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for SERVICES in flanneld kube-proxy kubelet docker;</div><div class="line">do</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl restart $SERVICES</div><div class="line">sudo systemctl enable $SERVICES</div><div class="line">sudo systemctl status $SERVICES</div><div class="line">done</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li>
<li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li>
</ul>
<p>本文链接：<a href="http://www.googol.tech/2017/08/23/Kubernetes-Node-安装与配置-Ubuntu系统/">http://www.googol.tech/2017/08/23/Kubernetes-Node-安装与配置-Ubuntu系统/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内网下已经搭建好Kubernetes集群，由两台CentOS组成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;192.168.1.11 Master&lt;br&gt;192.168.1.12 Node&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于之前搭建时操作的都是CentOS系统中
    
    </summary>
    
      <category term="Kubernetes" scheme="http://www.googol.tech/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub Pages+Hexo搭建博客</title>
    <link href="http://www.googol.tech/2017/08/22/GitHub%20Pages+Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.googol.tech/2017/08/22/GitHub Pages+Hexo搭建博客/</id>
    <published>2017-08-22T06:58:41.000Z</published>
    <updated>2017-10-20T14:45:02.976Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客中，主要记录我的个人站点维护过程，内容会不定时更新。</p>
<h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p>关于博客的主题也是挑了很久，最终选定Maupassant，主要还是喜欢它的简洁和体积小巧。<br>Maupassant最初是由Cho大神为Typecho平台设计开发的一套响应式模板，体积只有20KB，在各种尺寸的设备上表现出色。</p>
<p>Hexo 平台： <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">https://github.com/tufu9441/maupassant-hexo</a></p>
<h2 id="开启文章目录"><a href="#开启文章目录" class="headerlink" title="开启文章目录"></a>开启文章目录</h2><p>比较简单，通常Hexo会自动在文章内容的前面生成一些关于文章的基本描述信息，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 搭建博客</div><div class="line">date: 2017-08-22 14:58:41</div><div class="line">toc: true</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>只需要在这里面加入来标示开启文章目录功能，这样在博客显示的时候，会自动列出文章的目录。</p>
<h2 id="开启RSS订阅功能"><a href="#开启RSS订阅功能" class="headerlink" title="开启RSS订阅功能"></a>开启RSS订阅功能</h2><h3 id="1-首先安装-hexo-generator-feed"><a href="#1-首先安装-hexo-generator-feed" class="headerlink" title="1. 首先安装 hexo-generator-feed"></a>1. 首先安装 hexo-generator-feed</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<h3 id="2-配置Hexo根目录-config-yml，配置RSS订阅"><a href="#2-配置Hexo根目录-config-yml，配置RSS订阅" class="headerlink" title="2. 配置Hexo根目录_config.yml，配置RSS订阅"></a>2. 配置Hexo根目录_config.yml，配置RSS订阅</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">plugin:</div><div class="line">  - hexo-generator-feed</div><div class="line"><span class="meta">#</span>Feed Atom</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div></pre></td></tr></table></figure>
<h2 id="使用Hexo-admin管理博客"><a href="#使用Hexo-admin管理博客" class="headerlink" title="使用Hexo-admin管理博客"></a>使用Hexo-admin管理博客</h2><h3 id="安装Hexo-admin"><a href="#安装Hexo-admin" class="headerlink" title="安装Hexo-admin"></a>安装Hexo-admin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save hexo-admin</div><div class="line">hexo server -d</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">CC-BY-NC-SA 4.0 许可协议</a>进行许可</li>
<li>欢迎转载，但请注明来自<a href="http://www.googol.tech/">稻草人</a>，并保持转载后文章内容的完整，本人保留所有版权相关权利。</li>
</ul>
<p>本文链接：<a href="http://www.googol.tech/2017/08/22/GitHub">http://www.googol.tech/2017/08/22/GitHub</a> Pages+Hexo搭建博客/</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客中，主要记录我的个人站点维护过程，内容会不定时更新。&lt;/p&gt;
&lt;h2 id=&quot;博客主题&quot;&gt;&lt;a href=&quot;#博客主题&quot; class=&quot;headerlink&quot; title=&quot;博客主题&quot;&gt;&lt;/a&gt;博客主题&lt;/h2&gt;&lt;p&gt;关于博客的主题也是挑了很久，最终选定Maupas
    
    </summary>
    
      <category term="Hexo" scheme="http://www.googol.tech/categories/hexo/"/>
    
    
  </entry>
  
</feed>
